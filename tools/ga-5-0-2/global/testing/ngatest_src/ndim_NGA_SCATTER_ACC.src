      subroutine m4_func_NGA_SCATTER_ACC(m4_test_type, m4_ndim)
      implicit none
#include "mafdecls.fh"
#include "global.fh"
c     
      integer n,m
      integer ndim
      parameter (n = m4_n)
      parameter (m = (m4_n**m4_ndim)/100)
      parameter (ndim = m4_ndim)
      m4_data_type a(substr(m4_array, 1, eval(m4_ndim*2-1)))
      m4_data_type b(substr(m4_array, 1, eval(m4_ndim*2-1)))
      integer lo(ndim),dims(ndim),ld(ndim)
      integer g_a
      integer chunk(ndim)
      integer i, j, total, loop, idx
      m4_data_type v(m)
      integer d(ndim, m)
      double precision drand
      m4_data_type alpha
      integer unique,unique_index
      integer nproc, me
      logical status
c     
      nproc = ga_nnodes()
      me    = ga_nodeid()
c     
c---------------------- initialize the GA -----------------------
c     initialize the chunk, dims, ld, and calculate the number 
c     of elements
      total=1
      do i = 1,ndim
         chunk(i) = 0
         dims(i) = n
         ld(i) = n
         total = total * dims(i)
      enddo
c
c***  Create global arrays
      if (.not. nga_create(m4_MT, ndim, dims, 'a', chunk, g_a))
     $     call ga_error(' ga_create failed ',1)
c     
      call ga_sync()
c
c-------------------------- NGA_SCATTER_ACC -----------------------
      m4_print_info(nga_scatter_acc)
c
      alpha=m4_rand(me*2+1)
c
c
      do loop = 1, MAXLOOP 
         call ga_sync()
c        initialize the index array and the array containing values
         do i = 1, m
c           generate indices
            unique_index = 0
            do while(unique_index.eq.0)
c              generate random number
               idx = int(drand(0)*(real(total/nproc)))
     $             +me*total/nproc
               if(idx .eq. 0) idx = idx+1
c
c              convert to ndim
               call conv_1ton(ndim,dims,idx,lo)
c
               do j=1,ndim
                  d(j,i) = lo(j)
               enddo
c              
               unique_index = unique(d,ndim,m,i)
            enddo
c
            v(i) = m4_rand
            a(substr(m4_ind_all, 1, eval(m4_ndim*7-1)))=v(i)
         enddo
c
c        the result should be
         do i = 1, m
            do j=1, ndim
               lo(j) = d(j,i)
            enddo
            call nga_get(g_a,lo,lo,
     $           b(substr(m4_lo_all, 1, eval(m4_ndim*6-1))),ld)
            a(substr(m4_ind_all, 1, eval(m4_ndim*7-1)))=
     $           a(substr(m4_ind_all, 1, eval(m4_ndim*7-1)))
     $           *alpha
     $           +b(substr(m4_lo_all, 1, eval(m4_ndim*6-1)))
         enddo
c
         call ga_sync()
c     
c        scatter the v to the global array
         call nga_scatter_acc(g_a, v, d, m, alpha)
         call ga_sync()
c
c        collect each elements and compare
         do i = 1, m
            do j=1, ndim
               lo(j) = d(j,i)
            enddo
            call nga_get(g_a,lo,lo,
     $           b(substr(m4_lo_all, 1, eval(m4_ndim*6-1))),ld)
c
c           compare the results
            if(abs(a(substr(m4_lo_all, 1, eval(m4_ndim*6-1))) -
     $           b(substr(m4_lo_all, 1, eval(m4_ndim*6-1)))) 
     $           .gt. 1d-5) then
               print *,'a=',
     $              a(substr(m4_lo_all, 1, eval(m4_ndim*6-1))),
     $              'b=',
     $              b(substr(m4_lo_all, 1, eval(m4_ndim*6-1))),
     $              'i=',i,'alpha=',alpha,'v=',v(i)
               call ga_error('bye', 0)
            endif
         enddo
      enddo
c
      call ga_sync()
      if(me.eq.0)then
         print *, 'OK'
         print *, ' '
         call ffflush(6)
      endif
c---------------------------
c     
      status= ga_destroy(g_a)
      end
