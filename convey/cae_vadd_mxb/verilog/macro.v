// WARNING!  This file was automatically generated by macexp.
//           Do not edit this file, any changes made will be lost.

`celldefine

// macexp DFFC 6
// macexp $size 3
// macexp $instance
// macexp clk
// macexp reset
// macexp d
// macexp q

module dffc_3 ( clk, reset, d, q );
	// synthesis attribute keep_hierarchy dffc_3 "true";
	input clk;
	input reset;
	input [2:0] d;
	output [2:0] q;
	reg [2:0] q;
	// synopsys translate_off
`ifdef RANDOM_INIT
	initial
	$random_init("q");
`endif
`ifdef CHK_RESET_EOS
	assert_quiescent_state #(0,1,0, 
	"***ERROR ASSERT: reset still asserted at end of simulation")
	a0(.clk(clk),.reset_n(1'b1), .state_expr(reset),
	.check_value(1'b0), .sample_event(1'b0));
`endif
	// synopsys translate_on
	always @(posedge clk) begin
	if (reset)
	q <= 3'b0;
	else
	q <= d;
	end
endmodule

// macexp DFFC 6
// macexp $size 256
// macexp $instance
// macexp clk
// macexp reset
// macexp d
// macexp q

module dffc_256 ( clk, reset, d, q );
	// synthesis attribute keep_hierarchy dffc_256 "true";
	input clk;
	input reset;
	input [255:0] d;
	output [255:0] q;
	reg [255:0] q;
	// synopsys translate_off
`ifdef RANDOM_INIT
	initial
	$random_init("q");
`endif
`ifdef CHK_RESET_EOS
	assert_quiescent_state #(0,1,0, 
	"***ERROR ASSERT: reset still asserted at end of simulation")
	a0(.clk(clk),.reset_n(1'b1), .state_expr(reset),
	.check_value(1'b0), .sample_event(1'b0));
`endif
	// synopsys translate_on
	always @(posedge clk) begin
	if (reset)
	q <= 256'b0;
	else
	q <= d;
	end
endmodule

// macexp DFFSI 7
// macexp $size 9
// macexp $instance
// macexp clk
// macexp reset
// macexp init
// macexp d
// macexp q

module dffsi_9 ( clk, reset, init, d, q );
	// synthesis attribute keep_hierarchy dffsi_9 "true";
	input clk;
	input reset;
	input [8:0] init;
	input [8:0] d;
	output [8:0] q;
	reg [8:0] q;
	// synopsys translate_off
`ifdef RANDOM_INIT
	initial
	$random_init("q");
`endif
`ifdef CHK_RESET_EOS
	assert_quiescent_state #(0,1,0, 
	"***ERROR ASSERT: reset still asserted at end of simulation")
	a0(.clk(clk),.reset_n(1'b1), .state_expr(reset),
	.check_value(1'b0), .sample_event(1'b0));
`endif
	// synopsys translate_on
	always @(posedge clk) begin
	if (reset)
	q <= init;
	else
	q <= d;
	end
endmodule

// macexp DFFC 6
// macexp $size 8
// macexp $instance
// macexp clk
// macexp reset
// macexp d
// macexp q

module dffc_8 ( clk, reset, d, q );
	// synthesis attribute keep_hierarchy dffc_8 "true";
	input clk;
	input reset;
	input [7:0] d;
	output [7:0] q;
	reg [7:0] q;
	// synopsys translate_off
`ifdef RANDOM_INIT
	initial
	$random_init("q");
`endif
`ifdef CHK_RESET_EOS
	assert_quiescent_state #(0,1,0, 
	"***ERROR ASSERT: reset still asserted at end of simulation")
	a0(.clk(clk),.reset_n(1'b1), .state_expr(reset),
	.check_value(1'b0), .sample_event(1'b0));
`endif
	// synopsys translate_on
	always @(posedge clk) begin
	if (reset)
	q <= 8'b0;
	else
	q <= d;
	end
endmodule

// macexp DFFC 6
// macexp $size 1
// macexp $instance
// macexp clk
// macexp reset
// macexp d
// macexp q

module dffc_1 ( clk, reset, d, q );
	// synthesis attribute keep_hierarchy dffc_1 "true";
	input clk;
	input reset;
	input d;
	output q;
	reg q;
	// synopsys translate_off
`ifdef RANDOM_INIT
	initial
	$random_init("q");
`endif
`ifdef CHK_RESET_EOS
	assert_quiescent_state #(0,1,0, 
	"***ERROR ASSERT: reset still asserted at end of simulation")
	a0(.clk(clk),.reset_n(1'b1), .state_expr(reset),
	.check_value(1'b0), .sample_event(1'b0));
`endif
	// synopsys translate_on
	always @(posedge clk) begin
	if (reset)
	q <= 1'b0;
	else
	q <= d;
	end
endmodule

// macexp DFF 5
// macexp $size 3
// macexp $instance
// macexp clk
// macexp d
// macexp q

module dff_3 ( clk, d, q );
	// synthesis attribute keep_hierarchy dff_3 "true";
	input clk;
	input [2:0] d;
	output [2:0] q;
	reg [2:0] q;
	// synopsys translate_off
`ifdef RANDOM_INIT
	initial
	$random_init("q");
`endif
	// synopsys translate_on
	always @(posedge clk) begin
	q <= d;
	end
endmodule

// macexp DFF 5
// macexp $size 1
// macexp $instance
// macexp clk
// macexp d
// macexp q

module dff_1 ( clk, d, q );
	// synthesis attribute keep_hierarchy dff_1 "true";
	input clk;
	input d;
	output q;
	reg q;
	// synopsys translate_off
`ifdef RANDOM_INIT
	initial
	$random_init("q");
`endif
	// synopsys translate_on
	always @(posedge clk) begin
	q <= d;
	end
endmodule

// macexp DFFR 6
// macexp $size 3
// macexp $instance
// macexp clk
// macexp reset
// macexp d
// macexp q

module dffr_3 ( clk, reset, d, q );
	// synthesis attribute keep_hierarchy dffr_3 "true";
	input clk;
	input reset;
	input [2:0] d;
	output [2:0] q;
	reg [2:0] q;
	// synopsys translate_off
`ifdef RANDOM_INIT
	initial
	$random_init("q");
`endif
`ifdef CHK_RESET_EOS
	assert_quiescent_state #(0,1,0, 
	"***ERROR ASSERT: reset still asserted at end of simulation")
	a0(.clk(clk),.reset_n(1'b1), .state_expr(reset),
	.check_value(1'b0), .sample_event(1'b0));
`endif
	// synopsys translate_on
	always @(posedge clk or posedge reset) begin
	if (reset)
	q <= 3'b0;
	else
	q <= d;
	end
endmodule

// macexp DFF 5
// macexp $size 64
// macexp $instance
// macexp clk
// macexp d
// macexp q

module dff_64 ( clk, d, q );
	// synthesis attribute keep_hierarchy dff_64 "true";
	input clk;
	input [63:0] d;
	output [63:0] q;
	reg [63:0] q;
	// synopsys translate_off
`ifdef RANDOM_INIT
	initial
	$random_init("q");
`endif
	// synopsys translate_on
	always @(posedge clk) begin
	q <= d;
	end
endmodule

// macexp DFF 5
// macexp $size 2
// macexp $instance
// macexp clk
// macexp d
// macexp q

module dff_2 ( clk, d, q );
	// synthesis attribute keep_hierarchy dff_2 "true";
	input clk;
	input [1:0] d;
	output [1:0] q;
	reg [1:0] q;
	// synopsys translate_off
`ifdef RANDOM_INIT
	initial
	$random_init("q");
`endif
	// synopsys translate_on
	always @(posedge clk) begin
	q <= d;
	end
endmodule

// macexp DFF 5
// macexp $size 48
// macexp $instance
// macexp clk
// macexp d
// macexp q

module dff_48 ( clk, d, q );
	// synthesis attribute keep_hierarchy dff_48 "true";
	input clk;
	input [47:0] d;
	output [47:0] q;
	reg [47:0] q;
	// synopsys translate_off
`ifdef RANDOM_INIT
	initial
	$random_init("q");
`endif
	// synopsys translate_on
	always @(posedge clk) begin
	q <= d;
	end
endmodule

// macexp DFFS_KEEP 6
// macexp $size 1
// macexp $instance
// macexp clk
// macexp set
// macexp d
// macexp q

module dffs_keep_1 ( clk, set, d, q );
	// synthesis attribute keep_hierarchy dffs_keep_1 "true";
	// synthesis attribute equivalent_register_removal dffs_keep_1 "no";
	// synthesis attribute shift_extract dffs_keep_1 "no";
	// synthesis attribute shreg_extract dffs_keep_1 "no";
	input clk;
	input set;
	input d;
	// synthesis attribute keep q "true";
	output q;
	// synopsys translate_off
`ifdef CHK_RESET_EOS
	assert_quiescent_state #(0,1,0, 
	"***ERROR ASSERT: set still asserted at end of simulation")
	a0(.clk(clk),.reset_n(1'b1), .state_expr(set),
	.check_value(1'b0), .sample_event(1'b0));
`endif
	// synopsys translate_on
	(* shreg_extract = "no" *)
	(* equivalent_register_removal = "no" *)
	(* S = "TRUE" *)
	(* KEEP = "TRUE" *)
	reg /* synthesis syn_preserve = 1 */ q;
	// synopsys translate_off
`ifdef RANDOM_INIT
	initial
	$random_init("q");
`endif
	// synopsys translate_on
	always @(posedge clk) begin
	if (set)
	q <= ~(1'b0);
	else
	q <= d;
	end
endmodule

// macexp MUX8 12
// macexp $size 115
// macexp $instance
// macexp s
// macexp i0
// macexp i1
// macexp i2
// macexp i3
// macexp i4
// macexp i5
// macexp i6
// macexp i7
// macexp o

module mux8_115 ( s, i0, i1, i2, i3, i4, i5, i6, i7, o );
	// synthesis attribute keep_hierarchy mux8_115 "true";
	input  [2:0] s;
	input  [114:0] i0, i1, i2, i3, i4, i5, i6, i7;
	output [114:0] o;
	wire [7:0] mi0;
	wire [7:0] mi1;
	wire [7:0] mi2;
	wire [7:0] mi3;
	wire [7:0] mi4;
	wire [7:0] mi5;
	wire [7:0] mi6;
	wire [7:0] mi7;
	wire [7:0] mi8;
	wire [7:0] mi9;
	wire [7:0] mi10;
	wire [7:0] mi11;
	wire [7:0] mi12;
	wire [7:0] mi13;
	wire [7:0] mi14;
	wire [7:0] mi15;
	wire [7:0] mi16;
	wire [7:0] mi17;
	wire [7:0] mi18;
	wire [7:0] mi19;
	wire [7:0] mi20;
	wire [7:0] mi21;
	wire [7:0] mi22;
	wire [7:0] mi23;
	wire [7:0] mi24;
	wire [7:0] mi25;
	wire [7:0] mi26;
	wire [7:0] mi27;
	wire [7:0] mi28;
	wire [7:0] mi29;
	wire [7:0] mi30;
	wire [7:0] mi31;
	wire [7:0] mi32;
	wire [7:0] mi33;
	wire [7:0] mi34;
	wire [7:0] mi35;
	wire [7:0] mi36;
	wire [7:0] mi37;
	wire [7:0] mi38;
	wire [7:0] mi39;
	wire [7:0] mi40;
	wire [7:0] mi41;
	wire [7:0] mi42;
	wire [7:0] mi43;
	wire [7:0] mi44;
	wire [7:0] mi45;
	wire [7:0] mi46;
	wire [7:0] mi47;
	wire [7:0] mi48;
	wire [7:0] mi49;
	wire [7:0] mi50;
	wire [7:0] mi51;
	wire [7:0] mi52;
	wire [7:0] mi53;
	wire [7:0] mi54;
	wire [7:0] mi55;
	wire [7:0] mi56;
	wire [7:0] mi57;
	wire [7:0] mi58;
	wire [7:0] mi59;
	wire [7:0] mi60;
	wire [7:0] mi61;
	wire [7:0] mi62;
	wire [7:0] mi63;
	wire [7:0] mi64;
	wire [7:0] mi65;
	wire [7:0] mi66;
	wire [7:0] mi67;
	wire [7:0] mi68;
	wire [7:0] mi69;
	wire [7:0] mi70;
	wire [7:0] mi71;
	wire [7:0] mi72;
	wire [7:0] mi73;
	wire [7:0] mi74;
	wire [7:0] mi75;
	wire [7:0] mi76;
	wire [7:0] mi77;
	wire [7:0] mi78;
	wire [7:0] mi79;
	wire [7:0] mi80;
	wire [7:0] mi81;
	wire [7:0] mi82;
	wire [7:0] mi83;
	wire [7:0] mi84;
	wire [7:0] mi85;
	wire [7:0] mi86;
	wire [7:0] mi87;
	wire [7:0] mi88;
	wire [7:0] mi89;
	wire [7:0] mi90;
	wire [7:0] mi91;
	wire [7:0] mi92;
	wire [7:0] mi93;
	wire [7:0] mi94;
	wire [7:0] mi95;
	wire [7:0] mi96;
	wire [7:0] mi97;
	wire [7:0] mi98;
	wire [7:0] mi99;
	wire [7:0] mi100;
	wire [7:0] mi101;
	wire [7:0] mi102;
	wire [7:0] mi103;
	wire [7:0] mi104;
	wire [7:0] mi105;
	wire [7:0] mi106;
	wire [7:0] mi107;
	wire [7:0] mi108;
	wire [7:0] mi109;
	wire [7:0] mi110;
	wire [7:0] mi111;
	wire [7:0] mi112;
	wire [7:0] mi113;
	wire [7:0] mi114;
	assign mi0 = {i7[0], i6[0], i5[0], i4[0], 
	i3[0], i2[0], i1[0], i0[0]};
	assign o[0] = mi0[s];
	assign mi1 = {i7[1], i6[1], i5[1], i4[1], 
	i3[1], i2[1], i1[1], i0[1]};
	assign o[1] = mi1[s];
	assign mi2 = {i7[2], i6[2], i5[2], i4[2], 
	i3[2], i2[2], i1[2], i0[2]};
	assign o[2] = mi2[s];
	assign mi3 = {i7[3], i6[3], i5[3], i4[3], 
	i3[3], i2[3], i1[3], i0[3]};
	assign o[3] = mi3[s];
	assign mi4 = {i7[4], i6[4], i5[4], i4[4], 
	i3[4], i2[4], i1[4], i0[4]};
	assign o[4] = mi4[s];
	assign mi5 = {i7[5], i6[5], i5[5], i4[5], 
	i3[5], i2[5], i1[5], i0[5]};
	assign o[5] = mi5[s];
	assign mi6 = {i7[6], i6[6], i5[6], i4[6], 
	i3[6], i2[6], i1[6], i0[6]};
	assign o[6] = mi6[s];
	assign mi7 = {i7[7], i6[7], i5[7], i4[7], 
	i3[7], i2[7], i1[7], i0[7]};
	assign o[7] = mi7[s];
	assign mi8 = {i7[8], i6[8], i5[8], i4[8], 
	i3[8], i2[8], i1[8], i0[8]};
	assign o[8] = mi8[s];
	assign mi9 = {i7[9], i6[9], i5[9], i4[9], 
	i3[9], i2[9], i1[9], i0[9]};
	assign o[9] = mi9[s];
	assign mi10 = {i7[10], i6[10], i5[10], i4[10], 
	i3[10], i2[10], i1[10], i0[10]};
	assign o[10] = mi10[s];
	assign mi11 = {i7[11], i6[11], i5[11], i4[11], 
	i3[11], i2[11], i1[11], i0[11]};
	assign o[11] = mi11[s];
	assign mi12 = {i7[12], i6[12], i5[12], i4[12], 
	i3[12], i2[12], i1[12], i0[12]};
	assign o[12] = mi12[s];
	assign mi13 = {i7[13], i6[13], i5[13], i4[13], 
	i3[13], i2[13], i1[13], i0[13]};
	assign o[13] = mi13[s];
	assign mi14 = {i7[14], i6[14], i5[14], i4[14], 
	i3[14], i2[14], i1[14], i0[14]};
	assign o[14] = mi14[s];
	assign mi15 = {i7[15], i6[15], i5[15], i4[15], 
	i3[15], i2[15], i1[15], i0[15]};
	assign o[15] = mi15[s];
	assign mi16 = {i7[16], i6[16], i5[16], i4[16], 
	i3[16], i2[16], i1[16], i0[16]};
	assign o[16] = mi16[s];
	assign mi17 = {i7[17], i6[17], i5[17], i4[17], 
	i3[17], i2[17], i1[17], i0[17]};
	assign o[17] = mi17[s];
	assign mi18 = {i7[18], i6[18], i5[18], i4[18], 
	i3[18], i2[18], i1[18], i0[18]};
	assign o[18] = mi18[s];
	assign mi19 = {i7[19], i6[19], i5[19], i4[19], 
	i3[19], i2[19], i1[19], i0[19]};
	assign o[19] = mi19[s];
	assign mi20 = {i7[20], i6[20], i5[20], i4[20], 
	i3[20], i2[20], i1[20], i0[20]};
	assign o[20] = mi20[s];
	assign mi21 = {i7[21], i6[21], i5[21], i4[21], 
	i3[21], i2[21], i1[21], i0[21]};
	assign o[21] = mi21[s];
	assign mi22 = {i7[22], i6[22], i5[22], i4[22], 
	i3[22], i2[22], i1[22], i0[22]};
	assign o[22] = mi22[s];
	assign mi23 = {i7[23], i6[23], i5[23], i4[23], 
	i3[23], i2[23], i1[23], i0[23]};
	assign o[23] = mi23[s];
	assign mi24 = {i7[24], i6[24], i5[24], i4[24], 
	i3[24], i2[24], i1[24], i0[24]};
	assign o[24] = mi24[s];
	assign mi25 = {i7[25], i6[25], i5[25], i4[25], 
	i3[25], i2[25], i1[25], i0[25]};
	assign o[25] = mi25[s];
	assign mi26 = {i7[26], i6[26], i5[26], i4[26], 
	i3[26], i2[26], i1[26], i0[26]};
	assign o[26] = mi26[s];
	assign mi27 = {i7[27], i6[27], i5[27], i4[27], 
	i3[27], i2[27], i1[27], i0[27]};
	assign o[27] = mi27[s];
	assign mi28 = {i7[28], i6[28], i5[28], i4[28], 
	i3[28], i2[28], i1[28], i0[28]};
	assign o[28] = mi28[s];
	assign mi29 = {i7[29], i6[29], i5[29], i4[29], 
	i3[29], i2[29], i1[29], i0[29]};
	assign o[29] = mi29[s];
	assign mi30 = {i7[30], i6[30], i5[30], i4[30], 
	i3[30], i2[30], i1[30], i0[30]};
	assign o[30] = mi30[s];
	assign mi31 = {i7[31], i6[31], i5[31], i4[31], 
	i3[31], i2[31], i1[31], i0[31]};
	assign o[31] = mi31[s];
	assign mi32 = {i7[32], i6[32], i5[32], i4[32], 
	i3[32], i2[32], i1[32], i0[32]};
	assign o[32] = mi32[s];
	assign mi33 = {i7[33], i6[33], i5[33], i4[33], 
	i3[33], i2[33], i1[33], i0[33]};
	assign o[33] = mi33[s];
	assign mi34 = {i7[34], i6[34], i5[34], i4[34], 
	i3[34], i2[34], i1[34], i0[34]};
	assign o[34] = mi34[s];
	assign mi35 = {i7[35], i6[35], i5[35], i4[35], 
	i3[35], i2[35], i1[35], i0[35]};
	assign o[35] = mi35[s];
	assign mi36 = {i7[36], i6[36], i5[36], i4[36], 
	i3[36], i2[36], i1[36], i0[36]};
	assign o[36] = mi36[s];
	assign mi37 = {i7[37], i6[37], i5[37], i4[37], 
	i3[37], i2[37], i1[37], i0[37]};
	assign o[37] = mi37[s];
	assign mi38 = {i7[38], i6[38], i5[38], i4[38], 
	i3[38], i2[38], i1[38], i0[38]};
	assign o[38] = mi38[s];
	assign mi39 = {i7[39], i6[39], i5[39], i4[39], 
	i3[39], i2[39], i1[39], i0[39]};
	assign o[39] = mi39[s];
	assign mi40 = {i7[40], i6[40], i5[40], i4[40], 
	i3[40], i2[40], i1[40], i0[40]};
	assign o[40] = mi40[s];
	assign mi41 = {i7[41], i6[41], i5[41], i4[41], 
	i3[41], i2[41], i1[41], i0[41]};
	assign o[41] = mi41[s];
	assign mi42 = {i7[42], i6[42], i5[42], i4[42], 
	i3[42], i2[42], i1[42], i0[42]};
	assign o[42] = mi42[s];
	assign mi43 = {i7[43], i6[43], i5[43], i4[43], 
	i3[43], i2[43], i1[43], i0[43]};
	assign o[43] = mi43[s];
	assign mi44 = {i7[44], i6[44], i5[44], i4[44], 
	i3[44], i2[44], i1[44], i0[44]};
	assign o[44] = mi44[s];
	assign mi45 = {i7[45], i6[45], i5[45], i4[45], 
	i3[45], i2[45], i1[45], i0[45]};
	assign o[45] = mi45[s];
	assign mi46 = {i7[46], i6[46], i5[46], i4[46], 
	i3[46], i2[46], i1[46], i0[46]};
	assign o[46] = mi46[s];
	assign mi47 = {i7[47], i6[47], i5[47], i4[47], 
	i3[47], i2[47], i1[47], i0[47]};
	assign o[47] = mi47[s];
	assign mi48 = {i7[48], i6[48], i5[48], i4[48], 
	i3[48], i2[48], i1[48], i0[48]};
	assign o[48] = mi48[s];
	assign mi49 = {i7[49], i6[49], i5[49], i4[49], 
	i3[49], i2[49], i1[49], i0[49]};
	assign o[49] = mi49[s];
	assign mi50 = {i7[50], i6[50], i5[50], i4[50], 
	i3[50], i2[50], i1[50], i0[50]};
	assign o[50] = mi50[s];
	assign mi51 = {i7[51], i6[51], i5[51], i4[51], 
	i3[51], i2[51], i1[51], i0[51]};
	assign o[51] = mi51[s];
	assign mi52 = {i7[52], i6[52], i5[52], i4[52], 
	i3[52], i2[52], i1[52], i0[52]};
	assign o[52] = mi52[s];
	assign mi53 = {i7[53], i6[53], i5[53], i4[53], 
	i3[53], i2[53], i1[53], i0[53]};
	assign o[53] = mi53[s];
	assign mi54 = {i7[54], i6[54], i5[54], i4[54], 
	i3[54], i2[54], i1[54], i0[54]};
	assign o[54] = mi54[s];
	assign mi55 = {i7[55], i6[55], i5[55], i4[55], 
	i3[55], i2[55], i1[55], i0[55]};
	assign o[55] = mi55[s];
	assign mi56 = {i7[56], i6[56], i5[56], i4[56], 
	i3[56], i2[56], i1[56], i0[56]};
	assign o[56] = mi56[s];
	assign mi57 = {i7[57], i6[57], i5[57], i4[57], 
	i3[57], i2[57], i1[57], i0[57]};
	assign o[57] = mi57[s];
	assign mi58 = {i7[58], i6[58], i5[58], i4[58], 
	i3[58], i2[58], i1[58], i0[58]};
	assign o[58] = mi58[s];
	assign mi59 = {i7[59], i6[59], i5[59], i4[59], 
	i3[59], i2[59], i1[59], i0[59]};
	assign o[59] = mi59[s];
	assign mi60 = {i7[60], i6[60], i5[60], i4[60], 
	i3[60], i2[60], i1[60], i0[60]};
	assign o[60] = mi60[s];
	assign mi61 = {i7[61], i6[61], i5[61], i4[61], 
	i3[61], i2[61], i1[61], i0[61]};
	assign o[61] = mi61[s];
	assign mi62 = {i7[62], i6[62], i5[62], i4[62], 
	i3[62], i2[62], i1[62], i0[62]};
	assign o[62] = mi62[s];
	assign mi63 = {i7[63], i6[63], i5[63], i4[63], 
	i3[63], i2[63], i1[63], i0[63]};
	assign o[63] = mi63[s];
	assign mi64 = {i7[64], i6[64], i5[64], i4[64], 
	i3[64], i2[64], i1[64], i0[64]};
	assign o[64] = mi64[s];
	assign mi65 = {i7[65], i6[65], i5[65], i4[65], 
	i3[65], i2[65], i1[65], i0[65]};
	assign o[65] = mi65[s];
	assign mi66 = {i7[66], i6[66], i5[66], i4[66], 
	i3[66], i2[66], i1[66], i0[66]};
	assign o[66] = mi66[s];
	assign mi67 = {i7[67], i6[67], i5[67], i4[67], 
	i3[67], i2[67], i1[67], i0[67]};
	assign o[67] = mi67[s];
	assign mi68 = {i7[68], i6[68], i5[68], i4[68], 
	i3[68], i2[68], i1[68], i0[68]};
	assign o[68] = mi68[s];
	assign mi69 = {i7[69], i6[69], i5[69], i4[69], 
	i3[69], i2[69], i1[69], i0[69]};
	assign o[69] = mi69[s];
	assign mi70 = {i7[70], i6[70], i5[70], i4[70], 
	i3[70], i2[70], i1[70], i0[70]};
	assign o[70] = mi70[s];
	assign mi71 = {i7[71], i6[71], i5[71], i4[71], 
	i3[71], i2[71], i1[71], i0[71]};
	assign o[71] = mi71[s];
	assign mi72 = {i7[72], i6[72], i5[72], i4[72], 
	i3[72], i2[72], i1[72], i0[72]};
	assign o[72] = mi72[s];
	assign mi73 = {i7[73], i6[73], i5[73], i4[73], 
	i3[73], i2[73], i1[73], i0[73]};
	assign o[73] = mi73[s];
	assign mi74 = {i7[74], i6[74], i5[74], i4[74], 
	i3[74], i2[74], i1[74], i0[74]};
	assign o[74] = mi74[s];
	assign mi75 = {i7[75], i6[75], i5[75], i4[75], 
	i3[75], i2[75], i1[75], i0[75]};
	assign o[75] = mi75[s];
	assign mi76 = {i7[76], i6[76], i5[76], i4[76], 
	i3[76], i2[76], i1[76], i0[76]};
	assign o[76] = mi76[s];
	assign mi77 = {i7[77], i6[77], i5[77], i4[77], 
	i3[77], i2[77], i1[77], i0[77]};
	assign o[77] = mi77[s];
	assign mi78 = {i7[78], i6[78], i5[78], i4[78], 
	i3[78], i2[78], i1[78], i0[78]};
	assign o[78] = mi78[s];
	assign mi79 = {i7[79], i6[79], i5[79], i4[79], 
	i3[79], i2[79], i1[79], i0[79]};
	assign o[79] = mi79[s];
	assign mi80 = {i7[80], i6[80], i5[80], i4[80], 
	i3[80], i2[80], i1[80], i0[80]};
	assign o[80] = mi80[s];
	assign mi81 = {i7[81], i6[81], i5[81], i4[81], 
	i3[81], i2[81], i1[81], i0[81]};
	assign o[81] = mi81[s];
	assign mi82 = {i7[82], i6[82], i5[82], i4[82], 
	i3[82], i2[82], i1[82], i0[82]};
	assign o[82] = mi82[s];
	assign mi83 = {i7[83], i6[83], i5[83], i4[83], 
	i3[83], i2[83], i1[83], i0[83]};
	assign o[83] = mi83[s];
	assign mi84 = {i7[84], i6[84], i5[84], i4[84], 
	i3[84], i2[84], i1[84], i0[84]};
	assign o[84] = mi84[s];
	assign mi85 = {i7[85], i6[85], i5[85], i4[85], 
	i3[85], i2[85], i1[85], i0[85]};
	assign o[85] = mi85[s];
	assign mi86 = {i7[86], i6[86], i5[86], i4[86], 
	i3[86], i2[86], i1[86], i0[86]};
	assign o[86] = mi86[s];
	assign mi87 = {i7[87], i6[87], i5[87], i4[87], 
	i3[87], i2[87], i1[87], i0[87]};
	assign o[87] = mi87[s];
	assign mi88 = {i7[88], i6[88], i5[88], i4[88], 
	i3[88], i2[88], i1[88], i0[88]};
	assign o[88] = mi88[s];
	assign mi89 = {i7[89], i6[89], i5[89], i4[89], 
	i3[89], i2[89], i1[89], i0[89]};
	assign o[89] = mi89[s];
	assign mi90 = {i7[90], i6[90], i5[90], i4[90], 
	i3[90], i2[90], i1[90], i0[90]};
	assign o[90] = mi90[s];
	assign mi91 = {i7[91], i6[91], i5[91], i4[91], 
	i3[91], i2[91], i1[91], i0[91]};
	assign o[91] = mi91[s];
	assign mi92 = {i7[92], i6[92], i5[92], i4[92], 
	i3[92], i2[92], i1[92], i0[92]};
	assign o[92] = mi92[s];
	assign mi93 = {i7[93], i6[93], i5[93], i4[93], 
	i3[93], i2[93], i1[93], i0[93]};
	assign o[93] = mi93[s];
	assign mi94 = {i7[94], i6[94], i5[94], i4[94], 
	i3[94], i2[94], i1[94], i0[94]};
	assign o[94] = mi94[s];
	assign mi95 = {i7[95], i6[95], i5[95], i4[95], 
	i3[95], i2[95], i1[95], i0[95]};
	assign o[95] = mi95[s];
	assign mi96 = {i7[96], i6[96], i5[96], i4[96], 
	i3[96], i2[96], i1[96], i0[96]};
	assign o[96] = mi96[s];
	assign mi97 = {i7[97], i6[97], i5[97], i4[97], 
	i3[97], i2[97], i1[97], i0[97]};
	assign o[97] = mi97[s];
	assign mi98 = {i7[98], i6[98], i5[98], i4[98], 
	i3[98], i2[98], i1[98], i0[98]};
	assign o[98] = mi98[s];
	assign mi99 = {i7[99], i6[99], i5[99], i4[99], 
	i3[99], i2[99], i1[99], i0[99]};
	assign o[99] = mi99[s];
	assign mi100 = {i7[100], i6[100], i5[100], i4[100], 
	i3[100], i2[100], i1[100], i0[100]};
	assign o[100] = mi100[s];
	assign mi101 = {i7[101], i6[101], i5[101], i4[101], 
	i3[101], i2[101], i1[101], i0[101]};
	assign o[101] = mi101[s];
	assign mi102 = {i7[102], i6[102], i5[102], i4[102], 
	i3[102], i2[102], i1[102], i0[102]};
	assign o[102] = mi102[s];
	assign mi103 = {i7[103], i6[103], i5[103], i4[103], 
	i3[103], i2[103], i1[103], i0[103]};
	assign o[103] = mi103[s];
	assign mi104 = {i7[104], i6[104], i5[104], i4[104], 
	i3[104], i2[104], i1[104], i0[104]};
	assign o[104] = mi104[s];
	assign mi105 = {i7[105], i6[105], i5[105], i4[105], 
	i3[105], i2[105], i1[105], i0[105]};
	assign o[105] = mi105[s];
	assign mi106 = {i7[106], i6[106], i5[106], i4[106], 
	i3[106], i2[106], i1[106], i0[106]};
	assign o[106] = mi106[s];
	assign mi107 = {i7[107], i6[107], i5[107], i4[107], 
	i3[107], i2[107], i1[107], i0[107]};
	assign o[107] = mi107[s];
	assign mi108 = {i7[108], i6[108], i5[108], i4[108], 
	i3[108], i2[108], i1[108], i0[108]};
	assign o[108] = mi108[s];
	assign mi109 = {i7[109], i6[109], i5[109], i4[109], 
	i3[109], i2[109], i1[109], i0[109]};
	assign o[109] = mi109[s];
	assign mi110 = {i7[110], i6[110], i5[110], i4[110], 
	i3[110], i2[110], i1[110], i0[110]};
	assign o[110] = mi110[s];
	assign mi111 = {i7[111], i6[111], i5[111], i4[111], 
	i3[111], i2[111], i1[111], i0[111]};
	assign o[111] = mi111[s];
	assign mi112 = {i7[112], i6[112], i5[112], i4[112], 
	i3[112], i2[112], i1[112], i0[112]};
	assign o[112] = mi112[s];
	assign mi113 = {i7[113], i6[113], i5[113], i4[113], 
	i3[113], i2[113], i1[113], i0[113]};
	assign o[113] = mi113[s];
	assign mi114 = {i7[114], i6[114], i5[114], i4[114], 
	i3[114], i2[114], i1[114], i0[114]};
	assign o[114] = mi114[s];
endmodule

// macexp MUX8 12
// macexp $size 96
// macexp $instance
// macexp s
// macexp i0
// macexp i1
// macexp i2
// macexp i3
// macexp i4
// macexp i5
// macexp i6
// macexp i7
// macexp o

module mux8_96 ( s, i0, i1, i2, i3, i4, i5, i6, i7, o );
	// synthesis attribute keep_hierarchy mux8_96 "true";
	input  [2:0] s;
	input  [95:0] i0, i1, i2, i3, i4, i5, i6, i7;
	output [95:0] o;
	wire [7:0] mi0;
	wire [7:0] mi1;
	wire [7:0] mi2;
	wire [7:0] mi3;
	wire [7:0] mi4;
	wire [7:0] mi5;
	wire [7:0] mi6;
	wire [7:0] mi7;
	wire [7:0] mi8;
	wire [7:0] mi9;
	wire [7:0] mi10;
	wire [7:0] mi11;
	wire [7:0] mi12;
	wire [7:0] mi13;
	wire [7:0] mi14;
	wire [7:0] mi15;
	wire [7:0] mi16;
	wire [7:0] mi17;
	wire [7:0] mi18;
	wire [7:0] mi19;
	wire [7:0] mi20;
	wire [7:0] mi21;
	wire [7:0] mi22;
	wire [7:0] mi23;
	wire [7:0] mi24;
	wire [7:0] mi25;
	wire [7:0] mi26;
	wire [7:0] mi27;
	wire [7:0] mi28;
	wire [7:0] mi29;
	wire [7:0] mi30;
	wire [7:0] mi31;
	wire [7:0] mi32;
	wire [7:0] mi33;
	wire [7:0] mi34;
	wire [7:0] mi35;
	wire [7:0] mi36;
	wire [7:0] mi37;
	wire [7:0] mi38;
	wire [7:0] mi39;
	wire [7:0] mi40;
	wire [7:0] mi41;
	wire [7:0] mi42;
	wire [7:0] mi43;
	wire [7:0] mi44;
	wire [7:0] mi45;
	wire [7:0] mi46;
	wire [7:0] mi47;
	wire [7:0] mi48;
	wire [7:0] mi49;
	wire [7:0] mi50;
	wire [7:0] mi51;
	wire [7:0] mi52;
	wire [7:0] mi53;
	wire [7:0] mi54;
	wire [7:0] mi55;
	wire [7:0] mi56;
	wire [7:0] mi57;
	wire [7:0] mi58;
	wire [7:0] mi59;
	wire [7:0] mi60;
	wire [7:0] mi61;
	wire [7:0] mi62;
	wire [7:0] mi63;
	wire [7:0] mi64;
	wire [7:0] mi65;
	wire [7:0] mi66;
	wire [7:0] mi67;
	wire [7:0] mi68;
	wire [7:0] mi69;
	wire [7:0] mi70;
	wire [7:0] mi71;
	wire [7:0] mi72;
	wire [7:0] mi73;
	wire [7:0] mi74;
	wire [7:0] mi75;
	wire [7:0] mi76;
	wire [7:0] mi77;
	wire [7:0] mi78;
	wire [7:0] mi79;
	wire [7:0] mi80;
	wire [7:0] mi81;
	wire [7:0] mi82;
	wire [7:0] mi83;
	wire [7:0] mi84;
	wire [7:0] mi85;
	wire [7:0] mi86;
	wire [7:0] mi87;
	wire [7:0] mi88;
	wire [7:0] mi89;
	wire [7:0] mi90;
	wire [7:0] mi91;
	wire [7:0] mi92;
	wire [7:0] mi93;
	wire [7:0] mi94;
	wire [7:0] mi95;
	assign mi0 = {i7[0], i6[0], i5[0], i4[0], 
	i3[0], i2[0], i1[0], i0[0]};
	assign o[0] = mi0[s];
	assign mi1 = {i7[1], i6[1], i5[1], i4[1], 
	i3[1], i2[1], i1[1], i0[1]};
	assign o[1] = mi1[s];
	assign mi2 = {i7[2], i6[2], i5[2], i4[2], 
	i3[2], i2[2], i1[2], i0[2]};
	assign o[2] = mi2[s];
	assign mi3 = {i7[3], i6[3], i5[3], i4[3], 
	i3[3], i2[3], i1[3], i0[3]};
	assign o[3] = mi3[s];
	assign mi4 = {i7[4], i6[4], i5[4], i4[4], 
	i3[4], i2[4], i1[4], i0[4]};
	assign o[4] = mi4[s];
	assign mi5 = {i7[5], i6[5], i5[5], i4[5], 
	i3[5], i2[5], i1[5], i0[5]};
	assign o[5] = mi5[s];
	assign mi6 = {i7[6], i6[6], i5[6], i4[6], 
	i3[6], i2[6], i1[6], i0[6]};
	assign o[6] = mi6[s];
	assign mi7 = {i7[7], i6[7], i5[7], i4[7], 
	i3[7], i2[7], i1[7], i0[7]};
	assign o[7] = mi7[s];
	assign mi8 = {i7[8], i6[8], i5[8], i4[8], 
	i3[8], i2[8], i1[8], i0[8]};
	assign o[8] = mi8[s];
	assign mi9 = {i7[9], i6[9], i5[9], i4[9], 
	i3[9], i2[9], i1[9], i0[9]};
	assign o[9] = mi9[s];
	assign mi10 = {i7[10], i6[10], i5[10], i4[10], 
	i3[10], i2[10], i1[10], i0[10]};
	assign o[10] = mi10[s];
	assign mi11 = {i7[11], i6[11], i5[11], i4[11], 
	i3[11], i2[11], i1[11], i0[11]};
	assign o[11] = mi11[s];
	assign mi12 = {i7[12], i6[12], i5[12], i4[12], 
	i3[12], i2[12], i1[12], i0[12]};
	assign o[12] = mi12[s];
	assign mi13 = {i7[13], i6[13], i5[13], i4[13], 
	i3[13], i2[13], i1[13], i0[13]};
	assign o[13] = mi13[s];
	assign mi14 = {i7[14], i6[14], i5[14], i4[14], 
	i3[14], i2[14], i1[14], i0[14]};
	assign o[14] = mi14[s];
	assign mi15 = {i7[15], i6[15], i5[15], i4[15], 
	i3[15], i2[15], i1[15], i0[15]};
	assign o[15] = mi15[s];
	assign mi16 = {i7[16], i6[16], i5[16], i4[16], 
	i3[16], i2[16], i1[16], i0[16]};
	assign o[16] = mi16[s];
	assign mi17 = {i7[17], i6[17], i5[17], i4[17], 
	i3[17], i2[17], i1[17], i0[17]};
	assign o[17] = mi17[s];
	assign mi18 = {i7[18], i6[18], i5[18], i4[18], 
	i3[18], i2[18], i1[18], i0[18]};
	assign o[18] = mi18[s];
	assign mi19 = {i7[19], i6[19], i5[19], i4[19], 
	i3[19], i2[19], i1[19], i0[19]};
	assign o[19] = mi19[s];
	assign mi20 = {i7[20], i6[20], i5[20], i4[20], 
	i3[20], i2[20], i1[20], i0[20]};
	assign o[20] = mi20[s];
	assign mi21 = {i7[21], i6[21], i5[21], i4[21], 
	i3[21], i2[21], i1[21], i0[21]};
	assign o[21] = mi21[s];
	assign mi22 = {i7[22], i6[22], i5[22], i4[22], 
	i3[22], i2[22], i1[22], i0[22]};
	assign o[22] = mi22[s];
	assign mi23 = {i7[23], i6[23], i5[23], i4[23], 
	i3[23], i2[23], i1[23], i0[23]};
	assign o[23] = mi23[s];
	assign mi24 = {i7[24], i6[24], i5[24], i4[24], 
	i3[24], i2[24], i1[24], i0[24]};
	assign o[24] = mi24[s];
	assign mi25 = {i7[25], i6[25], i5[25], i4[25], 
	i3[25], i2[25], i1[25], i0[25]};
	assign o[25] = mi25[s];
	assign mi26 = {i7[26], i6[26], i5[26], i4[26], 
	i3[26], i2[26], i1[26], i0[26]};
	assign o[26] = mi26[s];
	assign mi27 = {i7[27], i6[27], i5[27], i4[27], 
	i3[27], i2[27], i1[27], i0[27]};
	assign o[27] = mi27[s];
	assign mi28 = {i7[28], i6[28], i5[28], i4[28], 
	i3[28], i2[28], i1[28], i0[28]};
	assign o[28] = mi28[s];
	assign mi29 = {i7[29], i6[29], i5[29], i4[29], 
	i3[29], i2[29], i1[29], i0[29]};
	assign o[29] = mi29[s];
	assign mi30 = {i7[30], i6[30], i5[30], i4[30], 
	i3[30], i2[30], i1[30], i0[30]};
	assign o[30] = mi30[s];
	assign mi31 = {i7[31], i6[31], i5[31], i4[31], 
	i3[31], i2[31], i1[31], i0[31]};
	assign o[31] = mi31[s];
	assign mi32 = {i7[32], i6[32], i5[32], i4[32], 
	i3[32], i2[32], i1[32], i0[32]};
	assign o[32] = mi32[s];
	assign mi33 = {i7[33], i6[33], i5[33], i4[33], 
	i3[33], i2[33], i1[33], i0[33]};
	assign o[33] = mi33[s];
	assign mi34 = {i7[34], i6[34], i5[34], i4[34], 
	i3[34], i2[34], i1[34], i0[34]};
	assign o[34] = mi34[s];
	assign mi35 = {i7[35], i6[35], i5[35], i4[35], 
	i3[35], i2[35], i1[35], i0[35]};
	assign o[35] = mi35[s];
	assign mi36 = {i7[36], i6[36], i5[36], i4[36], 
	i3[36], i2[36], i1[36], i0[36]};
	assign o[36] = mi36[s];
	assign mi37 = {i7[37], i6[37], i5[37], i4[37], 
	i3[37], i2[37], i1[37], i0[37]};
	assign o[37] = mi37[s];
	assign mi38 = {i7[38], i6[38], i5[38], i4[38], 
	i3[38], i2[38], i1[38], i0[38]};
	assign o[38] = mi38[s];
	assign mi39 = {i7[39], i6[39], i5[39], i4[39], 
	i3[39], i2[39], i1[39], i0[39]};
	assign o[39] = mi39[s];
	assign mi40 = {i7[40], i6[40], i5[40], i4[40], 
	i3[40], i2[40], i1[40], i0[40]};
	assign o[40] = mi40[s];
	assign mi41 = {i7[41], i6[41], i5[41], i4[41], 
	i3[41], i2[41], i1[41], i0[41]};
	assign o[41] = mi41[s];
	assign mi42 = {i7[42], i6[42], i5[42], i4[42], 
	i3[42], i2[42], i1[42], i0[42]};
	assign o[42] = mi42[s];
	assign mi43 = {i7[43], i6[43], i5[43], i4[43], 
	i3[43], i2[43], i1[43], i0[43]};
	assign o[43] = mi43[s];
	assign mi44 = {i7[44], i6[44], i5[44], i4[44], 
	i3[44], i2[44], i1[44], i0[44]};
	assign o[44] = mi44[s];
	assign mi45 = {i7[45], i6[45], i5[45], i4[45], 
	i3[45], i2[45], i1[45], i0[45]};
	assign o[45] = mi45[s];
	assign mi46 = {i7[46], i6[46], i5[46], i4[46], 
	i3[46], i2[46], i1[46], i0[46]};
	assign o[46] = mi46[s];
	assign mi47 = {i7[47], i6[47], i5[47], i4[47], 
	i3[47], i2[47], i1[47], i0[47]};
	assign o[47] = mi47[s];
	assign mi48 = {i7[48], i6[48], i5[48], i4[48], 
	i3[48], i2[48], i1[48], i0[48]};
	assign o[48] = mi48[s];
	assign mi49 = {i7[49], i6[49], i5[49], i4[49], 
	i3[49], i2[49], i1[49], i0[49]};
	assign o[49] = mi49[s];
	assign mi50 = {i7[50], i6[50], i5[50], i4[50], 
	i3[50], i2[50], i1[50], i0[50]};
	assign o[50] = mi50[s];
	assign mi51 = {i7[51], i6[51], i5[51], i4[51], 
	i3[51], i2[51], i1[51], i0[51]};
	assign o[51] = mi51[s];
	assign mi52 = {i7[52], i6[52], i5[52], i4[52], 
	i3[52], i2[52], i1[52], i0[52]};
	assign o[52] = mi52[s];
	assign mi53 = {i7[53], i6[53], i5[53], i4[53], 
	i3[53], i2[53], i1[53], i0[53]};
	assign o[53] = mi53[s];
	assign mi54 = {i7[54], i6[54], i5[54], i4[54], 
	i3[54], i2[54], i1[54], i0[54]};
	assign o[54] = mi54[s];
	assign mi55 = {i7[55], i6[55], i5[55], i4[55], 
	i3[55], i2[55], i1[55], i0[55]};
	assign o[55] = mi55[s];
	assign mi56 = {i7[56], i6[56], i5[56], i4[56], 
	i3[56], i2[56], i1[56], i0[56]};
	assign o[56] = mi56[s];
	assign mi57 = {i7[57], i6[57], i5[57], i4[57], 
	i3[57], i2[57], i1[57], i0[57]};
	assign o[57] = mi57[s];
	assign mi58 = {i7[58], i6[58], i5[58], i4[58], 
	i3[58], i2[58], i1[58], i0[58]};
	assign o[58] = mi58[s];
	assign mi59 = {i7[59], i6[59], i5[59], i4[59], 
	i3[59], i2[59], i1[59], i0[59]};
	assign o[59] = mi59[s];
	assign mi60 = {i7[60], i6[60], i5[60], i4[60], 
	i3[60], i2[60], i1[60], i0[60]};
	assign o[60] = mi60[s];
	assign mi61 = {i7[61], i6[61], i5[61], i4[61], 
	i3[61], i2[61], i1[61], i0[61]};
	assign o[61] = mi61[s];
	assign mi62 = {i7[62], i6[62], i5[62], i4[62], 
	i3[62], i2[62], i1[62], i0[62]};
	assign o[62] = mi62[s];
	assign mi63 = {i7[63], i6[63], i5[63], i4[63], 
	i3[63], i2[63], i1[63], i0[63]};
	assign o[63] = mi63[s];
	assign mi64 = {i7[64], i6[64], i5[64], i4[64], 
	i3[64], i2[64], i1[64], i0[64]};
	assign o[64] = mi64[s];
	assign mi65 = {i7[65], i6[65], i5[65], i4[65], 
	i3[65], i2[65], i1[65], i0[65]};
	assign o[65] = mi65[s];
	assign mi66 = {i7[66], i6[66], i5[66], i4[66], 
	i3[66], i2[66], i1[66], i0[66]};
	assign o[66] = mi66[s];
	assign mi67 = {i7[67], i6[67], i5[67], i4[67], 
	i3[67], i2[67], i1[67], i0[67]};
	assign o[67] = mi67[s];
	assign mi68 = {i7[68], i6[68], i5[68], i4[68], 
	i3[68], i2[68], i1[68], i0[68]};
	assign o[68] = mi68[s];
	assign mi69 = {i7[69], i6[69], i5[69], i4[69], 
	i3[69], i2[69], i1[69], i0[69]};
	assign o[69] = mi69[s];
	assign mi70 = {i7[70], i6[70], i5[70], i4[70], 
	i3[70], i2[70], i1[70], i0[70]};
	assign o[70] = mi70[s];
	assign mi71 = {i7[71], i6[71], i5[71], i4[71], 
	i3[71], i2[71], i1[71], i0[71]};
	assign o[71] = mi71[s];
	assign mi72 = {i7[72], i6[72], i5[72], i4[72], 
	i3[72], i2[72], i1[72], i0[72]};
	assign o[72] = mi72[s];
	assign mi73 = {i7[73], i6[73], i5[73], i4[73], 
	i3[73], i2[73], i1[73], i0[73]};
	assign o[73] = mi73[s];
	assign mi74 = {i7[74], i6[74], i5[74], i4[74], 
	i3[74], i2[74], i1[74], i0[74]};
	assign o[74] = mi74[s];
	assign mi75 = {i7[75], i6[75], i5[75], i4[75], 
	i3[75], i2[75], i1[75], i0[75]};
	assign o[75] = mi75[s];
	assign mi76 = {i7[76], i6[76], i5[76], i4[76], 
	i3[76], i2[76], i1[76], i0[76]};
	assign o[76] = mi76[s];
	assign mi77 = {i7[77], i6[77], i5[77], i4[77], 
	i3[77], i2[77], i1[77], i0[77]};
	assign o[77] = mi77[s];
	assign mi78 = {i7[78], i6[78], i5[78], i4[78], 
	i3[78], i2[78], i1[78], i0[78]};
	assign o[78] = mi78[s];
	assign mi79 = {i7[79], i6[79], i5[79], i4[79], 
	i3[79], i2[79], i1[79], i0[79]};
	assign o[79] = mi79[s];
	assign mi80 = {i7[80], i6[80], i5[80], i4[80], 
	i3[80], i2[80], i1[80], i0[80]};
	assign o[80] = mi80[s];
	assign mi81 = {i7[81], i6[81], i5[81], i4[81], 
	i3[81], i2[81], i1[81], i0[81]};
	assign o[81] = mi81[s];
	assign mi82 = {i7[82], i6[82], i5[82], i4[82], 
	i3[82], i2[82], i1[82], i0[82]};
	assign o[82] = mi82[s];
	assign mi83 = {i7[83], i6[83], i5[83], i4[83], 
	i3[83], i2[83], i1[83], i0[83]};
	assign o[83] = mi83[s];
	assign mi84 = {i7[84], i6[84], i5[84], i4[84], 
	i3[84], i2[84], i1[84], i0[84]};
	assign o[84] = mi84[s];
	assign mi85 = {i7[85], i6[85], i5[85], i4[85], 
	i3[85], i2[85], i1[85], i0[85]};
	assign o[85] = mi85[s];
	assign mi86 = {i7[86], i6[86], i5[86], i4[86], 
	i3[86], i2[86], i1[86], i0[86]};
	assign o[86] = mi86[s];
	assign mi87 = {i7[87], i6[87], i5[87], i4[87], 
	i3[87], i2[87], i1[87], i0[87]};
	assign o[87] = mi87[s];
	assign mi88 = {i7[88], i6[88], i5[88], i4[88], 
	i3[88], i2[88], i1[88], i0[88]};
	assign o[88] = mi88[s];
	assign mi89 = {i7[89], i6[89], i5[89], i4[89], 
	i3[89], i2[89], i1[89], i0[89]};
	assign o[89] = mi89[s];
	assign mi90 = {i7[90], i6[90], i5[90], i4[90], 
	i3[90], i2[90], i1[90], i0[90]};
	assign o[90] = mi90[s];
	assign mi91 = {i7[91], i6[91], i5[91], i4[91], 
	i3[91], i2[91], i1[91], i0[91]};
	assign o[91] = mi91[s];
	assign mi92 = {i7[92], i6[92], i5[92], i4[92], 
	i3[92], i2[92], i1[92], i0[92]};
	assign o[92] = mi92[s];
	assign mi93 = {i7[93], i6[93], i5[93], i4[93], 
	i3[93], i2[93], i1[93], i0[93]};
	assign o[93] = mi93[s];
	assign mi94 = {i7[94], i6[94], i5[94], i4[94], 
	i3[94], i2[94], i1[94], i0[94]};
	assign o[94] = mi94[s];
	assign mi95 = {i7[95], i6[95], i5[95], i4[95], 
	i3[95], i2[95], i1[95], i0[95]};
	assign o[95] = mi95[s];
endmodule

// macexp DFF 5
// macexp $size 32
// macexp $instance
// macexp clk
// macexp d
// macexp q

module dff_32 ( clk, d, q );
	// synthesis attribute keep_hierarchy dff_32 "true";
	input clk;
	input [31:0] d;
	output [31:0] q;
	reg [31:0] q;
	// synopsys translate_off
`ifdef RANDOM_INIT
	initial
	$random_init("q");
`endif
	// synopsys translate_on
	always @(posedge clk) begin
	q <= d;
	end
endmodule

// macexp DFFS 6
// macexp $size 1
// macexp $instance
// macexp clk
// macexp set
// macexp d
// macexp q

module dffs_1 ( clk, set, d, q );
	// synthesis attribute keep_hierarchy dffs_1 "true";
	input clk;
	input set;
	input d;
	output q;
	reg q;
	// synopsys translate_off
`ifdef RANDOM_INIT
	initial
	$random_init("q");
`endif
`ifdef CHK_RESET_EOS
	assert_quiescent_state #(0,1,0, 
	"***ERROR ASSERT: set still asserted at end of simulation")
	a0(.clk(clk),.reset_n(1'b1), .state_expr(set),
	.check_value(1'b0), .sample_event(1'b0));
`endif
	// synopsys translate_on
	always @(posedge clk) begin
	if (set)
	q <= ~(1'b0);
	else
	q <= d;
	end
endmodule

`endcelldefine

