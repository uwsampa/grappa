# -*- Autoconf -*-
#
# Copyright (c)      2008  Sandia Corporation
#

## --------------------- ##
## Autoconf Requirements ##
## --------------------- ##
AC_PREREQ(2.59)

## ---------------------------------- ##
## Autoconf / Automake Initialization ##
## ---------------------------------- ##
AC_INIT([qthread],
		m4_esyscmd([config/version-gen]),
		[kbwheel@sandia.gov])
AC_CONFIG_AUX_DIR([config])
AC_CONFIG_MACRO_DIR([config])
AC_CONFIG_SRCDIR([src/qthread.c])

dnl Require at least AM 1.7.  Prior versions require AM_CONFIG_HEADER
dnl and have no equivalent to AC_CONFIG_HEADERS (the plural version),
dnl which is a pain.  AM 1.7 also added support for putting target
dnl information in AM_CONDITIONAL blocks and using the += modifier.
dnl ... removed "check-news" because of automatic version generation
AM_INIT_AUTOMAKE([foreign dist-bzip2 no-define 1.7])
# If Automake supports silent rules, enable them (credit to Brian)
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

# clean some extra things...
CLEANFILES="*~ .\#* .gdb_history"
AC_SUBST(CLEANFILES)

## -------------------------- ##
## Information on the package ##
## -------------------------- ##
AC_CANONICAL_HOST

AC_ARG_ENABLE([inlined-functions],
			  [AS_HELP_STRING([--disable-inlined-functions],
							  [prevent functions from being inlined; this sometimes is useful for analysis of the code in a debugger or some other tool])])
AS_IF([test "x$enable_inlined_functions" == x],
	  [AC_DEFINE([QINLINE], [inline], [Allow functions to be inlined])],
	  [AS_IF([test "x$enable_inlined_functions" == xyes],
			 [AC_DEFINE([QINLINE], [inline], [Allow functions to be inlined])],
			 [AC_DEFINE([QINLINE], [], [Allow functions to be inlined])])])

dnl Logic for this argument happens in system services section
AC_ARG_ENABLE([setrlimit],
  [AS_HELP_STRING([--disable-setrlimit],
     [do not use setrlimit to limit the stack (which is normally used only on Linux systems)])])
AS_IF([test "x$enable_setrlimit" == x], [
  case "$host" in
    ia64-*-linux-*)
      # this does not need get/setrlimit
      enable_setrlimit="no"
    ;;
    *-linux-*)
      enable_setrlimit="yes"
    ;;
    *)
      enable_setrlimit="no"
  esac])

## ------------------- ##
## Checks for programs ##
## ------------------- ##
AC_PROG_CC
dnl We use system extensions.  This includes setting _GNU_SOURCE
AC_USE_SYSTEM_EXTENSIONS
AC_PROG_CC_C99
AC_PROG_CPP
AC_PROG_CXX
AS_IF([test "x$CXX" = "xg++"],
	  [AS_IF([test "x$GXX" = x],
	  		 [AC_MSG_ERROR([Qthreads requires a C++ compiler!])])])
QTHREAD_DETECT_COMPILER_TYPE
AM_PROG_AS
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_LIBTOOL

AC_CACHE_SAVE

dnl check arguments, save values for later
AC_ARG_ENABLE([hardware-increments],
  [AS_HELP_STRING([--disable-hardware-increments],
     [use mutexes to do the internal increments; compatible with more compilers, but slow.])])

AC_ARG_ENABLE([aligncheck],
  [AS_HELP_STRING([--disable-aligncheck], [check the alignment of synchronization addresses])],
  [], [enable_aligncheck="yes"])
AS_IF([test "x$enable_aligncheck" = "xno"],
      [AC_DEFINE([QTHREAD_NOALIGNCHECK], [1],
         [Do not check the alignment of synchronization addresses])])

AC_ARG_ENABLE([guard-pages],
  [AS_HELP_STRING([--enable-guard-pages],
     [use extra memory around the thread stacks to help detect stack overruns (will triple memory requirements per thread)])])

AC_ARG_ENABLE([debug],
  [AS_HELP_STRING([--enable-debug],
     [prints out debugging information as programs run, tracing their qthread-related behavior. Uses the environment variable QTHREAD_DEBUG_LEVEL. The higher the level, the greater the detail])],
  [enable_debug_trace="yes"], [enable_debug_trace="no"])
AS_IF([test "x$enable_debug_trace" == "xyes"],
      [AC_DEFINE([QTHREAD_DEBUG], [1], [prints out debugging information at runtime])])

AC_ARG_ENABLE([picky],
  [AS_HELP_STRING([--enable-picky],
	 [turns on extra compiler warnings (for developers of qthreads)])])
AS_IF([test "x$enable_picky" == x],
	  [AS_IF([test -d "${srcdir}/.svn"],
			 [echo "--> developer override: enable picky compiler by default"
			  enable_picky=yes])])
AS_IF([test "x$enable_picky" == xyes],
  [case "$qthread_cv_c_compiler_type" in
   GNU)
   CFLAGS="-Wall -Wno-strict-aliasing -Wmissing-prototypes -Wstrict-prototypes $CFLAGS"
   ;;
   Intel)
   CFLAGS="-Wall -wd981 -wd1572 -wd869 $CFLAGS"
   ;;
   SunStudio)
   # This compiler defaults to enabling all warnings
   ;;
   PortlandGroup)
   CFLAGS="-Minform=inform $CFLAGS"
   ;;
   *)
   CFLAGS="-Wall $CFLAGS"
   ;;
   esac
   case "$qthread_cv_cxx_compiler_type" in
   GNU)
   CXXFLAGS="-Wall $CXXFLAGS"
   ;;
   Intel)
   CXXFLAGS="-Wall -wd981 $CXXFLAGS"
   ;;
   SunStudio)
   # This compiler defaults to enabling all warnings
   ;;
   PortlandGroup)
   CXXFLAGS="-Minform=inform $CXXFLAGS"
   ;;
   *)
   CXXFLAGS="-Wall $CXXFLAGS"
   ;;
   esac])

AC_ARG_ENABLE([fullsize-stacks],
  [AS_HELP_STRING([--enable-fullsize-stacks], [use 8MB stacks for every thread])],
  [], [enable_fullsize_stacks="no"])
AC_ARG_ENABLE([very-small-stacks],
  [AS_HELP_STRING([--enable-very-small-stacks], [use 2k stacks for every thread (dangerous)])],
  [], [enable_very_small_stacks="no"])
dnl keep in mind, if the stack size is not a multiple of the page size,
dnl alignment issues may become dicey, depending on the architecture
AS_IF([test "x$enable_fullsize_stacks" = "xyes"],   [qthread_cv_stack_size=8388608],
	  [AS_IF([test "x$enable_very_small_stacks" = "xyes"],
			 [qthread_cv_stack_size=2048],
			 [case "$host" in
			  	powerpc-apple-darwin*)
	  			AC_CHECK_SIZEOF([void*])
				AS_IF([test "x$ac_cv_sizeof_voidp" == "x8"],
					  [qthread_cv_stack_size=8192],
					  [qthread_cv_stack_size=4096])
	  			;;
				*)
				qthread_cv_stack_size=4096
				;;
		  	  esac])])
AC_DEFINE_UNQUOTED([QTHREAD_DEFAULT_STACK_SIZE],[$qthread_cv_stack_size],
				   [What size stacks to use])

AC_ARG_ENABLE([pooled-memory],
  [AS_HELP_STRING([--disable-pooled-memory],
      [prevents qthreads from (in most cases) using memory pools, which is sometimes more compatible with machines that have unusual alignment issues])],
  [], [enable_pooled_memory="yes"])
AS_IF([test "x$enable_pooled_memory" = "xno"],
      [AC_DEFINE([UNPOOLED], [1], [prevents most uses of memory pools])])

AC_ARG_ENABLE([thread-count],
  [AS_HELP_STRING([--enable-thread-count],
     [counts the number of threads and the number of concurrent threads and prints it out when qthread_finalize() is run; slows down computation])],
  [], [enable_thread_count="no"])
AS_IF([test "x$enable_thread_count" = "xyes"],
      [AC_DEFINE([QTHREAD_COUNT_THREADS], [1], [keeps track of the number of threads])])

AC_ARG_ENABLE([shepherd-profiling],
  [AS_HELP_STRING([--enable-shepherd-profiling],
     [counts the amount of wall-clock time that each shepherd spends idle])],
  [], [enable_shepherd_profiling="no"])
AS_IF([test "x$enable_shepherd_profiling" = "xyes"],
      [AC_DEFINE([QTHREAD_SHEPHERD_PROFILING], [1], [adds code to monitor how much time shepherds spend idle])])

AC_ARG_ENABLE([lock-profiling],
  [AS_HELP_STRING([--enable-lock-profiling],
	 [counts the amount of wall-clock time that is spent aquiring locks])],
  [], [enable_lock_profiling="no"])
AS_IF([test "x$enable_lock_profiling" = "xyes"],
	  [AC_DEFINE([QTHREAD_LOCK_PROFILING], [1], [adds code to monitor how much time is spent aquiring locks])])

AC_ARG_ENABLE([timer-progs],
  [AS_HELP_STRING([--enable-timer-progs],
     [enables a few test programs that report some system-specific statistics (context-swap time, etc.)])],
  [], [enable_timer_progs="no"])
AS_IF([test "x$enable_timer_progs" = "xyes"],
	  [need_qtimer=yes])
AM_CONDITIONAL([ENABLE_TIMER_PROGS], [test "x$enable_timer_progs" = "xyes"])

AC_ARG_ENABLE([cxx-tests],
	      [AS_HELP_STRING([--disable-cxx-tests],
			      [disables all C++ test programs])],
	      [],
	      [enable_cxx_tests="yes"])
AM_CONDITIONAL([ENABLE_CXX_TESTS], [test "x$enable_cxx_tests" = "xyes"])

AC_ARG_ENABLE([asserts],
  [AS_HELP_STRING([--enable-asserts], [adds sanity checks to most qthread functions])],
  [], [enable_asserts="no"])
AS_IF([test "x$enable_asserts" = "xno"],
      [AC_DEFINE([QTHREAD_NO_ASSERTS], [1], [removes sanity checks from most qthread functions])])

AC_ARG_ENABLE([lazy-threadids],
  [AS_HELP_STRING([--disable-lazy-threadids],
     [makes qthread assign thread IDs at spawning time, rather than as necessary; this ensures every thread gets a unique thread id])],
  [], [enable_lazy_threadids="yes"])
AS_IF([test "x$enable_lazy_threadids" = "xno" -o "x$enable_debug_trace" = "xyes"],
      [AC_DEFINE([QTHREAD_NONLAZY_THREADIDS], [1], [makes sure every thread gets an id at creation time])
	   enable_lazy_threadids=no])

AC_ARG_ENABLE([64bit-aligned_t],
  [AS_HELP_STRING([--enable-64bit-aligned_t], [If enabled, aligned_t is sizeof(long).  If disabled, aligned_t is sizeof(int). By default, aligned_t is sizeof(void*)])])
dnl deal with result once we figure out the hardware sizes

AC_ARG_ENABLE([64bit-alignment],
  [AS_HELP_STRING([--enable-64bit-alignment], [Align aligned_t to 8 byte boundry, even if it is 4 bytes long.  Default is to align to sizeof(aligned_t). Alignment cannot be smaller than aligned_t.])])
dnl deal with result once we figure out the hardware sizes

AC_CACHE_SAVE

# Figure out if we're targeting SST or Unix implementation.  Will add
# MTA here when the time comes.
QTHREAD_CHECK_SST([qthread_implementation="sst"], [qthread_implementation="unix"])

# Figure out whether the compiler has builtin atomic operations
AS_IF([test "x$enable_hardware_increments" != xno],
	  [QTHREAD_CHECK_ATOMICS])
QTHREAD_BUILTIN_EXPECT
QTHREAD_VAMACROS
QTHREAD_CHECK_BITFIELDS

## -------------------- ##
## Checks for libraries ##
## -------------------- ##
AC_ARG_ENABLE([pthreads],
			  [AC_HELP_STRING([--disable-pthreads],
							  [Link with pthreads. Without pthreads, no more than one shepherd can be created. Not using pthreads is still considered EXPERIMENTAL, and is technically impossible if using cprops. But someday, this will happen. (default: enabled)])],
			  [],
			  [ac_cv_pthreads_enable="yes"])
AS_IF([test "x$ac_cv_pthreads_enable" == "xyes"],
	  [AC_SEARCH_LIBS([pthread_create], [pthread])
	   AS_IF([test "$ac_cv_search_pthread_create" != "no"],
			 [AC_DEFINE([QTHREAD_USE_PTHREADS], [1], [allowed to spawn worker threads])])
	   AC_CHECK_FUNCS([pthread_yield pthread_spin_init])])
AC_ARG_WITH([cprops],
			[AC_HELP_STRING([--with-cprops[=DIR]],
							[Enable the use of cprops, and optionally specify the location of libcprops library])])
AS_IF([test "x$with_cprops" != xno && test "x$with_cprops" != x],
	  [AS_IF([test "x$with_cprops" != "xyes"],
			 [CPPFLAGS="${CPPFLAGS} -I$with_cprops/include"
			  LDFLAGS="${LDFLAGS} -L$with_cprops/lib"
			  EXTRA_DISTCHECK_OPTIONS="${EXTRA_DISTCHECK_OPTIONS} --with-cprops=$with_cprops"])
	  AC_SEARCH_LIBS([cp_hashtable_create],
					 [cprops "cprops -ldl" "cprops -ldl -lssl" "cprops -lsocket -lnsl" "cprops -lsocket -lnsl -lssl" "cprops -lsocket -lnsl -ldl" "cprops -lsocket -lnsl -ldl -lssl"],
					 [AC_DEFINE([HAVE_CPROPS],[1],[Define if cprops is available])
					  with_cprops=yes],
					 [AC_MSG_ERROR([If you want libcprops, see http://cprops.sf.net/])])
	  ])
AS_IF([test "x$qthread_implementation" = "xsst"],
	  [
	   AC_DEFINE([QTHREAD_SST_PRIMITIVES],[1],[Define to use the SST primitives])
	   enable_pooled_memory="no"
	   LDFLAGS="$LDFLAGS $SST_LIBS"
	   AC_SEARCH_LIBS([ceil],[m_ppc],[],[AC_MSG_ERROR([Cannot find ceil()])])
	   ],
	  [AS_IF([test "x$qthread_implementation" = "xunix"],[
	  AC_SEARCH_LIBS([ceil],[m],[],[AC_MSG_ERROR([Cannot find ceil()])])

	  ])])

AC_CACHE_SAVE

## ----------------------- ##
## Checks for header files ##
## ----------------------- ##
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_HEADER_TIME
AC_CHECK_HEADERS([stdlib.h fcntl.h ucontext.h sys/time.h sys/resource.h mach/mach_time.h malloc.h math.h sys/types.h sys/sysctl.h unistd.h])
AX_CREATE_STDINT_H([include/qthread/qthread-int.h])
AC_SYS_LARGEFILE

QTHREAD_CHECK_FUNCTION

NEWCCLD='$(CC)'
AS_IF([test "x$with_cprops" != xyes ],
      [QTHREAD_HASH_MAPS([AS_IF([test "x$enable_shared" == xno],
			 [NEWCCLD='$(CXXLD)'])],
			 [AC_MSG_ERROR([No acceptable hash table method available (suggest either a different C++ compiler or libcprops)])]
			 )])
AC_SUBST([NEWCCLD])


AC_CACHE_SAVE

## --------------- ##
## Check for types ##
## --------------- ##
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_TYPE_PID_T

AC_CHECK_SIZEOF([int])
AC_CHECK_SIZEOF([void*])

# Default behavior:
#   sizeof(aligned_t)    = sizeof(void*)
#   alignment(aligned_t) = sizeof(void*)
# If user specified 64bit aligned_t:
#   sizeof(aligned_t)    = 8 (or should this be sizeof(long)?)
#   alignment(aligned_t) = 8
# else if user forbids 64bit aligned_t:
#   sizeof(aligned_t)    = sizeof(int)
#   alignment(aligned_t) = sizeof(int)
# If user specified 64bit alignment:
#   alignment(aligned_t) = 8
sizeof_aligned_t="$ac_cv_sizeof_voidp"
align_aligned_t="$ac_cv_sizeof_voidp"
AS_IF([test "x$enable_64bit_aligned_t" == "xyes"],
	  [sizeof_aligned_t="8"
	   align_aligned_t="8"],
	  [AS_IF([test "x$enable_64bit_aligned_t" == "xno"],
			 [sizeof_aligned_t="$ac_cv_sizeof_int"
			  align_aligned_t="$ac_cv_sizeof_int"])])
AS_IF([test "x$enable_64bit_alignment" == "xyes"],
	  [align_aligned_t=8])

AC_DEFINE_UNQUOTED([QTHREAD_SIZEOF_ALIGNED_T], [$sizeof_aligned_t], [size of aligned_t])
AC_DEFINE_UNQUOTED([QTHREAD_ALIGNMENT_ALIGNED_T], [$align_aligned_t], [alignment of aligned_t])

AC_CACHE_SAVE

## -------------------- ##
## Check for structures ##
## -------------------- ##
AC_CHECK_SIZEOF(pthread_mutex_t)
dnl BWB - FIX ME - shouldn't we actually make sure on this size thing?
AC_DEFINE([PTHREAD_MUTEX_SMALL_ENOUGH], [1],
   [this signifies that pthread_mutex_t is small enough to fit in the existing data structures])

AC_CACHE_SAVE

## ---------------------------------- ##
## Check for compiler characteristics ##
## ---------------------------------- ##
# Find out if we need the -restrict flag
RESTRICT_CXXFLAGS=""
AS_IF([test "x$qthread_cv_cxx_compiler_type" = "xIntel"],
	  [RESTRICT_CXXFLAGS="-restrict"])
AC_SUBST([RESTRICT_CXXFLAGS])

AC_C_CONST
AC_C_INLINE
AX_C_RESTRICT
AC_C_VOLATILE

QTHREAD_MALLOC_ATTRIBUTE
QTHREAD_UNUSED_ATTRIBUTE
QTHREAD_ALIGNED_ATTRIBUTE
QTHREAD_NOINLINE_ATTRIBUTE

QTHREAD_CHECK_ASSEMBLY([have_assembly=1], [have_assembly=0])
AS_IF([test "x$have_assembly" == "x0"],
	  [AC_MSG_NOTICE(Compiling on a system without inline assembly support. This will be slow!)
	   AS_IF([test "x$enable_hardware_increments" == x],
			 [AC_MSG_NOTICE(turning on software increments ($have_assembly))
			  enable_hardware_increments=no],
			 [AS_IF([test "x$enable_hardware_increments" = "xyes"],
				    [AC_MSG_ERROR([No assembly available and software increments disabled.])])])])
AS_IF([test "x$enable_hardware_increments" = "xno"],
      [AC_DEFINE([QTHREAD_MUTEX_INCREMENT], [1],
         [Use mutexes instead of assembly for atomic increment])])
AS_IF([test "x$enable_guard_pages" = "xyes"],
	  [AC_DEFINE([QTHREAD_GUARD_PAGES], [1],
		 [Use guard pages to detect stack overruns])],
	  [enable_guard_pages="no"])

AC_CACHE_SAVE

## --------------------------- ##
## Check for library functions ##
## --------------------------- ##
AC_FUNC_VPRINTF
AC_FUNC_MMAP
AC_CHECK_FUNCS([strtol floor memalign posix_memalign memset memmove munmap memcpy getrlimit setrlimit fstat64 lseek64 getcontext swapcontext makecontext sched_yield processor_bind madvise sysconf sysctl])
QTHREAD_CHECK_QSORT
AC_TRY_LINK([#include <sys/types.h>
#include <sys/mman.h>
],[int testma (void) { return MADV_ACCESS_LWP; }],[qt_cv_malwp=yes
   AC_DEFINE([HAVE_MADV_ACCESS_LWP], [1], [if MADV_ACCESS_LWP exists])],[qt_cv_malwp=no])
AC_MSG_CHECKING(for MADV_ACCESS_LWP)
AC_MSG_RESULT($qt_cv_malwp)
AX_CHECK_PAGE_ALIGNED_MALLOC
AX_CHECK_16ALIGNED_MALLOC
AX_CHECK_16ALIGNED_CALLOC
QTHREAD_CHECK_WORKING_VALLOC

AC_CACHE_SAVE

## ------------------------- ##
## Check for system services ##
## ------------------------- ##

# Figure out if we need rlimit...
AS_IF([test "x$enable_setrlimit" != "xno" -a "x$qthread_implementation" = "xunix"], [
  AS_IF([test "x$ac_cv_func_getrlimit" != "xyes"],
        [AC_MSG_ERROR([getrlimit() needed on Linux platforms or when setrlimit enabled])])
  AC_DEFINE([NEED_RLIMIT], [1], [Whether the library should use get/set rlimit functions])])

# Figure out if we need makecontext
qthread_makecontext_type="none"
AS_IF([test "x$qthread_implementation" = "xunix"], [
  case "$host" in
    *-solaris2.8)
      AC_DEFINE([EXTRA_MAKECONTEXT_ARGC], [1], 
         [solaris 8 requires argc be one larger than the actual count of arguments])
      AC_DEFINE([INVERSE_STACK_POINTER], [1], 
         [make the ss_sp member of uc_stack be the high-address of the stack, rather than the low-address of the stack])
    ;;
    *-solaris2.9)
      AC_DEFINE([__MAKECONTEXT_V2_SOURCE], [1], [force the Sun makecontext to behave correctly])
    ;;
  esac
  QTHREAD_CHECK_SWAPCONTEXT([qthread_makecontext_type="native"],
							[qthread_makecontext_type="own"])

  AS_IF([test "x$qthread_makecontext_type" = "xnone"], 
        [AC_MSG_ERROR([Can not find working makecontext.])])
])

AC_ARG_WITH([gcd],
			[AS_HELP_STRING([--with-gcd=[gcd_style]],
							[specify which algorithm for computing greatest common denominator. Current options are: "mod" (default) and "shift". The mod option uses modulo operations, and is usually the fastest option. On some systems, modulo operations are particularly slow, and so the "shift" algorithm is faster. The difference is usually minor, and probably will not impact overall performance significantly, but this option is for true speed-demons who want to get the last word in speed.])],
			[],
			[with_gcd=mod])
AS_IF([test "x$with_gcd" == "xshift"],
	  [AC_DEFINE([QTHREAD_SHIFT_GCD],[1],[use a shift-based gcd algorithm])])

AC_ARG_ENABLE([condwait-queue],
  [AS_HELP_STRING([--enable-condwait-queue],
				  [force the use of a pthread condwait queue, instead of a spin-based queue for inter-thread communication (important if spinning shepherds interfere with each other). Default enabled on sparc/solaris, but default disabled elsewhere.])],
  [],
  [case "$host" in
	 sparc-sun-solaris*)
	   enable_condwait_queue="yes"
	   ;;
	 *)
   	   enable_condwait_queue="no"
	   ;;
   esac])
AS_IF([test "x$enable_condwait_queue" = "xyes"],
	  [AC_DEFINE([QTHREAD_CONDWAIT_BLOCKING_QUEUE], [1], [use pthread-based condwait for lf queue])])

AC_ARG_ENABLE([valgrind],
			  [AS_HELP_STRING([--enable-valgrind],
							  [compile with valgrind macros to assist with debugging])],
			  [], [enable_valgrind="no"])
AS_IF([test "x$enable_valgrind" = "xyes"],
	  [AC_CHECK_HEADERS([valgrind/memcheck.h],
						[AC_DEFINE([QTHREAD_USE_VALGRIND], [1],
								   [Use Valgrind Macros])])])

AC_ARG_ENABLE([rose-extensions],
			  [AS_HELP_STRING([--enable-rose-extensions],
							  [Enable some experimental extensions to qthreads that are designed to support integration with the ROSE compiler.])])
AS_IF([test "x$enable_rose_extensions" == xyes],
	  [AC_DEFINE([QTHREAD_USE_ROSE_EXTENSIONS], [1], [Define to enable ROSE extensions])])

AC_ARG_ENABLE([hardware-timer],
  [AS_HELP_STRING([--disable-hardware-timer],
				  [force the use of gettimeofday even if there is a better timer available])],
  [], [enable_hardware_timer="yes"])
AS_IF([test "x$enable_hardware_timer" = "xyes"],
	  [# Which timer do we want to use
	   qthread_timer_type=gettimeofday
	   AS_IF([test "x$qthread_timer_type" = "xgettimeofday"],
			 [AC_CHECK_FUNC([mach_absolute_time], [qthread_timer_type=mach])])
	   AS_IF([test "x$qthread_timer_type" = "xgettimeofday"],
			 [AC_CHECK_FUNC([gethrtime], [qthread_timer_type=gethrtime])])
	   AS_IF([test "x$qthread_timer_type" = "xgettimeofday"],
			 [QTHREAD_CHECK_ALTIX_TIMER([qthread_timer_type=altix])])
	   AS_IF([test "x$qthread_timer_type" = "xgettimeofday"],
			 [AC_SEARCH_LIBS([clock_gettime],[rt],
							 [qthread_timer_type=clock_gettime
							  break])])
	   AC_MSG_CHECKING([for high resolution timer type])
	   AC_MSG_RESULT([$qthread_timer_type])
	   ],[qthread_timer_type=gettimeofday])

AC_CACHE_SAVE

## External libraries that help on some architectures
qthread_topo=unknown
AS_IF([test "x$qthread_implementation" = "xunix"],
      [# First, check for the ones that will give me distance information
       AS_IF([test "x$qthread_topo" = xunknown],
	     [QTHREAD_CHECK_LIBLGRP([qthread_topo=lgrp])])
       AS_IF([test "x$qthread_topo" = xunknown],
	     [QTHREAD_CHECK_LIBNUMA([qthread_topo=libnuma],[qthread_topo=libnumaV2])])
       AS_IF([test "x$qthread_topo" = xunknown],
	     [QTHREAD_CHECK_TILETOPO([qthread_topo=tile])])
       # Second, check for the ones that only give me CPU affinity control/information
       # At the moment, hwloc does not support Mach very well,
       # so I need to use the Mach interface directly (i.e. check it first)
       AS_IF([test "x$qthread_topo" = xunknown],
	     [QTHREAD_CHECK_MACHTOPO([qthread_topo=mach])])
       AS_IF([test "x$qthread_topo" = xunknown],
	     [QTHREAD_CHECK_HWLOC([qthread_topo=hwloc])])
       # PLPA is deprecated in favor of hwloc
       AS_IF([test "x$qthread_topo" = xunknown],
	     [QTHREAD_CHECK_PLPA([qthread_topo=plpa],)])
       ])

## --------------- ##
## Output and done ##
## --------------- ##
AC_SUBST(EXTRA_DISTCHECK_OPTIONS)

AM_CONDITIONAL([COMPILE_TARGET_SST], [test "x$qthread_implementation" = "xsst"])
AM_CONDITIONAL([COMPILE_TARGET_UNIX], [test "x$qthread_implementation" = "xunix"])
AM_CONDITIONAL([QTHREAD_NEED_OWN_MAKECONTEXT], [test "x$qthread_makecontext_type" = "xown"])
AM_CONDITIONAL([QTHREAD_TIMER_TYPE_GETTIME], [test "x$qthread_timer_type" = "xclock_gettime"])
AM_CONDITIONAL([QTHREAD_TIMER_TYPE_MACH], [test "x$qthread_timer_type" = "xmach"])
AM_CONDITIONAL([QTHREAD_TIMER_TYPE_GETHRTIME], [test "x$qthread_timer_type" = "xgethrtime"])
AM_CONDITIONAL([QTHREAD_TIMER_TYPE_ALTIX], [test "x$qthread_timer_type" = "xaltix"])
AM_CONDITIONAL([QTHREAD_TIMER_TYPE_GETTIMEOFDAY], [test "x$qthread_timer_type" = "xgettimeofday"])
AM_CONDITIONAL([COMPILE_POOLED_MEMORY], [test "x$enable_pooled_memory" = "xyes"])
AM_CONDITIONAL([COMPILE_CXX_HASH], [test "x$with_cprops" != "xyes"])
AM_CONDITIONAL([COMPILE_ROSE_EXTENSIONS], [test "x$enable_rose_extensions" == xyes])

AC_CONFIG_HEADERS([include/config.h include/qthread/common.h])
AC_CONFIG_FILES([
    Makefile
    src/Makefile
    man/Makefile
    man/man3/Makefile
    include/Makefile
    include/qthread/Makefile
    test/Makefile])
AC_OUTPUT

echo ""
echo    "System Characteristics:"
echo    "               Target Style: $qthread_implementation"
echo    "         Topology Interface: ${qthread_topo:-none}"
echo    "                Qtimer type: ${qthread_timer_type:-none}"
echo    "             Aligned_t size: $sizeof_aligned_t (aligned on $align_aligned_t byte boundaries)"
qthread_stackprefix="         Default Stack size: "
case "$qthread_cv_stack_size" in
	8388608) echo "${qthread_stackprefix}8MB" ;;
	2096)    echo "${qthread_stackprefix}2kB" ;;
	4096)    echo "${qthread_stackprefix}4kB" ;;
	*)       echo "${qthread_stackprefix}${qthread_cv_stack_size} bytes" ;;
esac
echo    ""
echo    "Safety/Debugging:"
echo    "      Sanity assert() Calls: $enable_asserts"
echo    "    Check address alignment: $enable_aligncheck"
echo    "            Thread Counting: $enable_thread_count"
echo    "         Shepherd profiling: $enable_shepherd_profiling"
echo    " Debugging Trace Capability: $enable_debug_trace"
echo    "                Guard Pages: $enable_guard_pages"
echo    ""
echo    "Speed:"
echo    "            Lazy Thread IDs: $enable_lazy_threadids"
echo    "              Pooled Memory: $enable_pooled_memory"
qthread_incprefix="             Increments/CAS: "
AS_IF([test "x$enable_hardware_increments" = "xno"],
	  [AS_IF([test "x$ac_cv_func_pthread_spin_init" = "xyes"],
			 [echo "${qthread_incprefix}Spin (software)"],
			 [echo "${qthread_incprefix}Mutex (software)"])],
	  [AS_IF([test "x$qthread_cv_atomic_incr" = "xyes" -a "x$qthread_cv_atomic_CAS" = "xyes"],
			 [echo "${qthread_incprefix}Compiler Builtin (both)"],
			 [AS_IF([test "x$qthread_cv_atomic_incr" = "xyes"],
					[echo "${qthread_incprefix}Compiler Builtin/$qthread_cv_asm_arch"],
					[AS_IF([test "x$qthread_cv_atomic_CAS" = "xyes"],
						   [echo "${qthread_incprefix}$qthread_cv_asm_arch/Compiler Builtin"],
						   [echo "${qthread_incprefix}$qthread_cv_asm_arch"])])])])
echo ""
