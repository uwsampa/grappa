.TH qthread_prepare 3 "NOVEMBER 2006" libqthread "libqthread"
.SH NAME
.BR qthread_prepare ,
.B qthread_prepare_for
\- create an unscheduled qthread
.SH SYNOPSIS
.B #include <qthread/qthread.h>

.I qthread_t *
.br
.B qthread_prepare
.RI "(qthread_f *" f ", const void *" arg ", aligned_t *" ret );
.PP
.I qthread_t *
.br
.B qthread_prepare_for
.RI "(qthread_f *" f ", const void *" arg ", aligned_t *" ret ,
.ti +21
.RI "const qthread_shepherd_id_t " shepherd );
.SH DESCRIPTION
These are functions for preparing new qthreads, but not actually scheduling
them.
.PP
The first argument to these functions,
.IR f ,
is a function that will be run to completion by the created qthread. (Note that
.I f
is a qthread_f and not a qthread_t.) The second argument to these functions,
.IR arg ,
is an argument that will be passed to the specified function. Finally,
.I ret
is a pointer to the location that the return value of
.I f
will be placed into.
.PP
The qthread_f function must have a prototype like this:
.RS
.PP
aligned_t function(qthread_t *me, void *arg);
.RE
.PP
The
.BR qthread_prepare_for ()
function prepares the qthread for the specified shepherd.
.PP
When a qthread_t is returned, it is not scheduled to run, and must be passed to
either
.BR qthread_schedule ()
or
.BR qthread_schedule_on ().
.PP
The return value of the function
.I f
will be placed into the memory pointed
to by
.IR ret ,
in accordance with the full-empty bits. When
.BR qthread_fork ()
or
.BR qthread_fork_to ()
is called,
.I ret
will be emptied (as if it had been passed to
.BR qthread_empty ()).
When the function
.I f
returns, the returned value will be stored into
.I ret
and
.I ret
will be filled. The way to block until a function has finished is to use
.BR qthread_readFF ()
on the
.I ret
pointer.
.SH RETURN VALUE
These functions all return pointers to a qthread_t structure, which is a handle
to the qthread that was just prepared. On error, NULL is returned.
.SH SEE ALSO
.BR qthread_fork (3),
.BR qthread_fork_for (3),
.BR qthread_schedule (3),
.BR qthread_schedule_on (3)
