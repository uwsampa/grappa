.TH qt_loop_balance 3 "JUNE 2007" libqthread "libqthread"
.SH NAME
.BR qt_loop_balance ,
.B qt_loop_balance_future
\- a slightly intelligent implementation of a threaded loop
.SH SYNOPSIS
.B #include <qthread/qloop.h>

.I void
.br
.B qt_loop_balance
.RI "(const size_t " start ", const size_t " stop ,
.ti +17
.RI "const qt_loop_f " func ", void *" argptr );
.PP
.I void
.br
.B qt_loop_balance_future
.RI "(const size_t " start ", const size_t " stop ,
.ti +24
.RI "const qt_loop_f " func ", void *" argptr );
.SH DESCRIPTION
This function provides a simple C implementation of a threaded loop. Rather than using a predictable number of threads, however, the number of threads generated depends directly upon the number of shepherds available. The difference between
.BR qt_loop_balance ()
and
.BR qt_loop_balance_future ()
is that the former uses qthreads and the latter uses futures.
.PP
These function can be thought of as akin to the following code:
.RS
.PP
unsigned int i;
.br
for (i =
.IR start ;
i <
.IR stop ;
i ++) {
.RS
.IR func "(NULL, " argptr );
.RE
}
.RE
.PP
One qthread (or future) is spawned for each shepherd. The set of values of
.I i
(iterations) is divided evenly among the shepherds, and each qthread (or future) is assigned a set of iterations to perform.
.PP
The
.I func
argument must be a function pointer with a
.B qt_loop_f
prototype. Its basic code structure is expected to look like this:
.RS
.PP
void
.I func
(qthread_t *me, const size_t startat, const size_t stopat, void 
.RI * arg )
.br
{
.RS
for (unsigned int i = startat; i < stopat; i++) {
.RS
/* do work */
.RE
}
.RE
}
.RE
.PP
The arguments
.I startat
and
.I stopat
are determined by the library, and tell the function what range of
.I i
values (iterations) it is responsible for.
.BR qt_loop_balance ()
and
.BR qt_loop_balance_future ()
will not return until all of the qthreads (or futures) it spawned have exited.
.SH SEE ALSO
.BR qt_loop (3),
.BR qt_loop_future (3),
.BR qt_loopaccum_balance (3),
.BR qt_loopaccum_balance_future (3)
