.TH future_fork 3 "NOVEMBER 2006" libqthread "libqthread"
.SH NAME
.BR future_fork " \- spawn a qthread as a future"
.SH SYNOPSIS
.B #include <qthread/futurelib.h>

.I void
.br
.B future_fork
.RI "(const qthread_f *" f ", const void *" arg ", aligned_t *" ret );
.PP

.SH DESCRIPTION
This is a blocking function that will create a qthread on some location when
the number of currently active threads on that location is below a certain
threshold. If the number of currently active threads is too high, the function
will block until some threads complete.
.PP
The first argument is a pointer to the qthread creating the future computation.
This may be a NULL pointer if futures are created by a non-qthread. The second
argument,
.IR f ,
is a function that will be run to completion by the created qthread. (Note that
.I f
is a qthread_f and not a qthread_t.) The last argument,
.IR arg ,
is an argument that will be passed to the specified function.
.PP
The qthread_f function must have a prototype like this:
.RS
.PP
void function(qthread_t *me, void *arg);
.RE
.PP
Threads which are spawned with
.BR future_fork ()
must call
.BR future_exit ()
as the final action of the thread in order to free memory and yield up status
as an active thread.
.PP
When a thread creates future computations, the action may block, waiting
for the number of active threads to drop. Deadlock may result if many active
threads try to create futures. Therefore, when a thread attempts to create
futures, it must explicitly declare itself inactive using the  
.BR future_yield ()
function, then reactivate itself using the
.BR future_acquire ()
function.
.PP
The typical sequence for creating futures is: 
.RS
.PP
1) yield 
.br
2) loop creating futures
.br 
3) [optional: join with futures]
.br
4) acquire
.RE
.SH SEE ALSO
.BR future_join_all (3),
.BR future_init (3),
.BR future_exit (3),
.BR future_yield (3),
.BR future_acquire (3)
