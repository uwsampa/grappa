.TH qthread_fork 3 "NOVEMBER 2006" libqthread "libqthread"
.SH NAME
.BR qthread_fork ,
.B qthread_fork_to
\- spawn a qthread
.SH SYNOPSIS
.B #include <qthread/qthread.h>

.I int
.br
.B qthread_fork
.RI "(const qthread_f *" f ", const void *" arg ", aligned_t *" ret );
.PP
.I int
.br
.B qthread_fork_to
.RI "(const qthread_f *" f ", const void *" arg ", aligned_t *" ret ,
.ti +17
.RI "const qthread_shepherd_id_t " shepherd );
.SH DESCRIPTION
These are the functions for generating new qthreads.
.PP
The first argument to these functions,
.IR f ,
is a function that will be run to completion by the created qthread. (Note that
.I f
is a qthread_f and not a qthread_t.) The second argument to these functions,
.IR arg ,
is an argument that will be passed to the specified function. Finally,
.I ret
is a pointer to the location that the return value of
.I f
will be placed into.
.PP
The qthread_f function must have a prototype like this:
.RS
.PP
aligned_t function(qthread_t *me, void *arg);
.RE
.PP
The
.BR qthread_fork_to ()
function spawns the qthread to a specific shepherd.
.PP
When a qthread is spawned, it is immediately scheduled to be run, and may be
executed by its shepherd at any time.
.PP
The return value of the function
.I f
will be placed into the memory pointed to by
.IR ret ,
in accordance with the full-empty bits. When
.BR qthread_fork ()
or
.BR qthread_fork_to ()
is called,
.I ret
will be emptied (as if it had been passed to
.BR qthread_empty ()).
When the function
.I f
returns, the returned value will be stored into
.I ret
and
.I ret
will be filled. The way to block until a function has finished is to use
.BR qthread_readFF ()
on the
.I ret pointer.
.SH ENVIRONMENT
The operation of
.BR qthread_fork ()
and
.BR qthread_fork_to ()
is modified by the following environment variables:
.TP 4
.B QTHREAD_STACK_SIZE
This variable adjusts the size of the stacks that will be created for each
thread. Changes to this value during the course of the program run are ignored;
the value is only considered when
.BR qthread_initialize ()
is run.
.SH RETURN VALUE
On success, the thread is spawned and 0 is returned. On error, a non-zero
error code is returned.
.SH ERRORS
.TP 12
.B ENOMEM
Not enough memory could be allocated.
.SH SEE ALSO
.BR qthread_prepare (3),
.BR qthread_prepare_for (3),
.BR qthread_schedule (3),
.BR qthread_schedule_on (3)
