#include "thread.h"
#include "linked_list-walk.h"
#include "linked_list-config.h"

//#define TICKS 2600
//#define TICKS 5200
#define TICKS 7800

#ifdef ALARM
    #define YIELD(me, ticks) thread_yield_alarm((me), (ticks))
#else
    #define YIELD(me, ticks) thread_yield((me))
#endif

#define rdtscll(val) do { \
    unsigned int __a,__d; \
        asm volatile("rdtsc" : "=a" (__a), "=d" (__d)); \
            (val) = ((unsigned long)__a) | (((unsigned long)__d)<<32); \
              } while(0)

//int_fetch_add
inline uint64_t ifa(uint64_t* addr) {
    return __sync_fetch_and_add(addr, 1);
}

//xadd version
/*inline uint64_t ifa(uint64_t* addr) {
    uint64_t result = 1;
    asm("lock xadd %1, (%0);" 
            : "=r" (addr), "=r" (result) 
            :  "r" (result), "r" (addr));
    return result;
}*/

 

inline void prefetch(void *addr) {
	__builtin_prefetch(addr);
}

// walk the list
// TODO: prefetches for num_refs>4
uint64_t walk_prefetch_switch( thread* me, node* bases[], uint64_t count, int num_refs, int start_index ) {
  uint64_t sum = 0;
  const int si = 0;
//printf("thread s\n");
if (num_refs==1) {
	node* i0 = bases[si+0];
	while (count > 0) {
		count--;
		prefetch(&(i0->next));
        YIELD(me,TICKS);
		 i0 = i0->next;
	}
	sum += (uint64_t)i0;
	} else if (num_refs==2) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	while (count > 0) {
		count--;
		prefetch(&(i0->next));
		prefetch(&(i1->next));
		YIELD(me,TICKS);
		 i0 = i0->next; i1 = i1->next;
	}
	sum += (uint64_t)i0+ (uint64_t)i1;
	} else if (num_refs==3) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	node* i2 = bases[si+2];
	while (count > 0) {
		count--;
		prefetch(&(i0->next));
		prefetch(&(i1->next));
		prefetch(&(i2->next));
		YIELD(me,TICKS);
		 i0 = i0->next; i1 = i1->next; i2 = i2->next;
	}
	sum += (uint64_t)i0+ (uint64_t)i1+ (uint64_t)i2;
	} else if (num_refs==4) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	node* i2 = bases[si+2];
	node* i3 = bases[si+3];
	while (count > 0) {
		count--;
		prefetch(&(i0->next));
		prefetch(&(i1->next));
		prefetch(&(i2->next));
		prefetch(&(i3->next));
		YIELD(me,TICKS);
		 i0 = i0->next; i1 = i1->next; i2 = i2->next; i3 = i3->next;
	}
	sum += (uint64_t)i0+ (uint64_t)i1+ (uint64_t)i2+ (uint64_t)i3;
	}
  return sum;
}

uint64_t walk( node* bases[], uint64_t count, int num_refs, int start_index ) {
  uint64_t sum = 0;
  const int si = 0;
if (num_refs==1) {
	node* i0 = bases[si+0];
	while (count > 0) {
		count--;
        //printf("before: &0=%x\n",&(i0->id));
		sum += ifa(&(i0->id));
        //printf("after: &0=%x\n",&(i0->id));
		 i0 = i0->next;
	}
	} else if (num_refs==2) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	while (count > 0) {
		count--;
        //printf("before: &0=%x, &1=%x\n",&(i0->id),&(i1->id));
		sum += ifa(&(i0->id));
        //printf("after: &0=%x, &1=%x\n",&(i0->id),&(i1->id));
		sum += ifa(&(i1->id));
		 i0 = i0->next; i1 = i1->next;
	}
	} else if (num_refs==3) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	node* i2 = bases[si+2];
	while (count > 0) {
		count--;
		sum += ifa(&(i0->id));
		sum += ifa(&(i1->id));
		sum += ifa(&(i2->id));
		 i0 = i0->next; i1 = i1->next; i2 = i2->next;
	}
	} else if (num_refs==4) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	node* i2 = bases[si+2];
	node* i3 = bases[si+3];
	while (count > 0) {
		count--;
		sum += ifa(&(i0->id));
		sum += ifa(&(i1->id));
		sum += ifa(&(i2->id));
		sum += ifa(&(i3->id));
		 i0 = i0->next; i1 = i1->next; i2 = i2->next; i3 = i3->next;
	}
	} else if (num_refs==5) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	node* i2 = bases[si+2];
	node* i3 = bases[si+3];
	node* i4 = bases[si+4];
	while (count > 0) {
		count--;
		sum += ifa(&(i0->id));
		sum += ifa(&(i1->id));
		sum += ifa(&(i2->id));
		sum += ifa(&(i3->id));
		sum += ifa(&(i4->id));
		 i0 = i0->next; i1 = i1->next; i2 = i2->next; i3 = i3->next; i4 = i4->next;
	}
	} else if (num_refs==6) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	node* i2 = bases[si+2];
	node* i3 = bases[si+3];
	node* i4 = bases[si+4];
	node* i5 = bases[si+5];
	while (count > 0) {
		count--;
		sum += ifa(&(i0->id));
		sum += ifa(&(i1->id));
		sum += ifa(&(i2->id));
		sum += ifa(&(i3->id));
		sum += ifa(&(i4->id));
		sum += ifa(&(i5->id));
		 i0 = i0->next; i1 = i1->next; i2 = i2->next; i3 = i3->next; i4 = i4->next; i5 = i5->next;
	}
	} else if (num_refs==7) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	node* i2 = bases[si+2];
	node* i3 = bases[si+3];
	node* i4 = bases[si+4];
	node* i5 = bases[si+5];
	node* i6 = bases[si+6];
	while (count > 0) {
		count--;
		sum += ifa(&(i0->id));
		sum += ifa(&(i1->id));
		sum += ifa(&(i2->id));
		sum += ifa(&(i3->id));
		sum += ifa(&(i4->id));
		sum += ifa(&(i5->id));
		sum += ifa(&(i6->id));
		 i0 = i0->next; i1 = i1->next; i2 = i2->next; i3 = i3->next; i4 = i4->next; i5 = i5->next; i6 = i6->next;
	}
	} else if (num_refs==8) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	node* i2 = bases[si+2];
	node* i3 = bases[si+3];
	node* i4 = bases[si+4];
	node* i5 = bases[si+5];
	node* i6 = bases[si+6];
	node* i7 = bases[si+7];
	while (count > 0) {
		count--;
		sum += ifa(&(i0->id));
		sum += ifa(&(i1->id));
		sum += ifa(&(i2->id));
		sum += ifa(&(i3->id));
		sum += ifa(&(i4->id));
		sum += ifa(&(i5->id));
		sum += ifa(&(i6->id));
		sum += ifa(&(i7->id));
		 i0 = i0->next; i1 = i1->next; i2 = i2->next; i3 = i3->next; i4 = i4->next; i5 = i5->next; i6 = i6->next; i7 = i7->next;
	}
	} else if (num_refs==9) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	node* i2 = bases[si+2];
	node* i3 = bases[si+3];
	node* i4 = bases[si+4];
	node* i5 = bases[si+5];
	node* i6 = bases[si+6];
	node* i7 = bases[si+7];
	node* i8 = bases[si+8];
	while (count > 0) {
		count--;
		sum += ifa(&(i0->id));
		sum += ifa(&(i1->id));
		sum += ifa(&(i2->id));
		sum += ifa(&(i3->id));
		sum += ifa(&(i4->id));
		sum += ifa(&(i5->id));
		sum += ifa(&(i6->id));
		sum += ifa(&(i7->id));
		sum += ifa(&(i8->id));
		 i0 = i0->next; i1 = i1->next; i2 = i2->next; i3 = i3->next; i4 = i4->next; i5 = i5->next; i6 = i6->next; i7 = i7->next; i8 = i8->next;
	}
	} else if (num_refs==10) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	node* i2 = bases[si+2];
	node* i3 = bases[si+3];
	node* i4 = bases[si+4];
	node* i5 = bases[si+5];
	node* i6 = bases[si+6];
	node* i7 = bases[si+7];
	node* i8 = bases[si+8];
	node* i9 = bases[si+9];
	while (count > 0) {
		count--;
		sum += ifa(&(i0->id));
		sum += ifa(&(i1->id));
		sum += ifa(&(i2->id));
		sum += ifa(&(i3->id));
		sum += ifa(&(i4->id));
		sum += ifa(&(i5->id));
		sum += ifa(&(i6->id));
		sum += ifa(&(i7->id));
		sum += ifa(&(i8->id));
		sum += ifa(&(i9->id));
		 i0 = i0->next; i1 = i1->next; i2 = i2->next; i3 = i3->next; i4 = i4->next; i5 = i5->next; i6 = i6->next; i7 = i7->next; i8 = i8->next; i9 = i9->next;
	}
	} else if (num_refs==11) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	node* i2 = bases[si+2];
	node* i3 = bases[si+3];
	node* i4 = bases[si+4];
	node* i5 = bases[si+5];
	node* i6 = bases[si+6];
	node* i7 = bases[si+7];
	node* i8 = bases[si+8];
	node* i9 = bases[si+9];
	node* i10 = bases[si+10];
	while (count > 0) {
		count--;
		sum += ifa(&(i0->id));
		sum += ifa(&(i1->id));
		sum += ifa(&(i2->id));
		sum += ifa(&(i3->id));
		sum += ifa(&(i4->id));
		sum += ifa(&(i5->id));
		sum += ifa(&(i6->id));
		sum += ifa(&(i7->id));
		sum += ifa(&(i8->id));
		sum += ifa(&(i9->id));
		sum += ifa(&(i10->id));
		 i0 = i0->next; i1 = i1->next; i2 = i2->next; i3 = i3->next; i4 = i4->next; i5 = i5->next; i6 = i6->next; i7 = i7->next; i8 = i8->next; i9 = i9->next; i10 = i10->next;
	}
	} else if (num_refs==12) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	node* i2 = bases[si+2];
	node* i3 = bases[si+3];
	node* i4 = bases[si+4];
	node* i5 = bases[si+5];
	node* i6 = bases[si+6];
	node* i7 = bases[si+7];
	node* i8 = bases[si+8];
	node* i9 = bases[si+9];
	node* i10 = bases[si+10];
	node* i11 = bases[si+11];
	while (count > 0) {
		count--;
		sum += ifa(&(i0->id));
		sum += ifa(&(i1->id));
		sum += ifa(&(i2->id));
		sum += ifa(&(i3->id));
		sum += ifa(&(i4->id));
		sum += ifa(&(i5->id));
		sum += ifa(&(i6->id));
		sum += ifa(&(i7->id));
		sum += ifa(&(i8->id));
		sum += ifa(&(i9->id));
		sum += ifa(&(i10->id));
		sum += ifa(&(i11->id));
		 i0 = i0->next; i1 = i1->next; i2 = i2->next; i3 = i3->next; i4 = i4->next; i5 = i5->next; i6 = i6->next; i7 = i7->next; i8 = i8->next; i9 = i9->next; i10 = i10->next; i11 = i11->next;
	}
    } else if (num_refs==13) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	node* i2 = bases[si+2];
	node* i3 = bases[si+3];
	node* i4 = bases[si+4];
	node* i5 = bases[si+5];
	node* i6 = bases[si+6];
	node* i7 = bases[si+7];
	node* i8 = bases[si+8];
	node* i9 = bases[si+9];
	node* i10 = bases[si+10];
	node* i11 = bases[si+11];
	node* i12 = bases[si+12];
	while (count > 0) {
		count--;
		sum += ifa(&(i0->id));
		sum += ifa(&(i1->id));
		sum += ifa(&(i2->id));
		sum += ifa(&(i3->id));
		sum += ifa(&(i4->id));
		sum += ifa(&(i5->id));
		sum += ifa(&(i6->id));
		sum += ifa(&(i7->id));
		sum += ifa(&(i8->id));
		sum += ifa(&(i9->id));
		sum += ifa(&(i10->id));
		sum += ifa(&(i11->id));
		sum += ifa(&(i12->id));
		 i0 = i0->next; i1 = i1->next; i2 = i2->next; i3 = i3->next; i4 = i4->next; i5 = i5->next; i6 = i6->next; i7 = i7->next; i8 = i8->next; i9 = i9->next; i10 = i10->next; i11 = i11->next; i12 = i12->next;
	}
	} else if (num_refs==14) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	node* i2 = bases[si+2];
	node* i3 = bases[si+3];
	node* i4 = bases[si+4];
	node* i5 = bases[si+5];
	node* i6 = bases[si+6];
	node* i7 = bases[si+7];
	node* i8 = bases[si+8];
	node* i9 = bases[si+9];
	node* i10 = bases[si+10];
	node* i11 = bases[si+11];
	node* i12 = bases[si+12];
	node* i13 = bases[si+13];
	while (count > 0) {
		count--;
		sum += ifa(&(i0->id));
		sum += ifa(&(i1->id));
		sum += ifa(&(i2->id));
		sum += ifa(&(i3->id));
		sum += ifa(&(i4->id));
		sum += ifa(&(i5->id));
		sum += ifa(&(i6->id));
		sum += ifa(&(i7->id));
		sum += ifa(&(i8->id));
		sum += ifa(&(i9->id));
		sum += ifa(&(i10->id));
		sum += ifa(&(i11->id));
		sum += ifa(&(i12->id));
		sum += ifa(&(i13->id));
		 i0 = i0->next; i1 = i1->next; i2 = i2->next; i3 = i3->next; i4 = i4->next; i5 = i5->next; i6 = i6->next; i7 = i7->next; i8 = i8->next; i9 = i9->next; i10 = i10->next; i11 = i11->next; i12 = i12->next; i13 = i13->next;
	}
	} else if (num_refs==15) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	node* i2 = bases[si+2];
	node* i3 = bases[si+3];
	node* i4 = bases[si+4];
	node* i5 = bases[si+5];
	node* i6 = bases[si+6];
	node* i7 = bases[si+7];
	node* i8 = bases[si+8];
	node* i9 = bases[si+9];
	node* i10 = bases[si+10];
	node* i11 = bases[si+11];
	node* i12 = bases[si+12];
	node* i13 = bases[si+13];
	node* i14 = bases[si+14];
	while (count > 0) {
		count--;
		sum += ifa(&(i0->id));
		sum += ifa(&(i1->id));
		sum += ifa(&(i2->id));
		sum += ifa(&(i3->id));
		sum += ifa(&(i4->id));
		sum += ifa(&(i5->id));
		sum += ifa(&(i6->id));
		sum += ifa(&(i7->id));
		sum += ifa(&(i8->id));
		sum += ifa(&(i9->id));
		sum += ifa(&(i10->id));
		sum += ifa(&(i11->id));
		sum += ifa(&(i12->id));
		sum += ifa(&(i13->id));
		sum += ifa(&(i14->id));
		 i0 = i0->next; i1 = i1->next; i2 = i2->next; i3 = i3->next; i4 = i4->next; i5 = i5->next; i6 = i6->next; i7 = i7->next; i8 = i8->next; i9 = i9->next; i10 = i10->next; i11 = i11->next; i12 = i12->next; i13 = i13->next; i14 = i14->next;
	}
	} else if (num_refs==16) {
	node* i0 = bases[si+0];
	node* i1 = bases[si+1];
	node* i2 = bases[si+2];
	node* i3 = bases[si+3];
	node* i4 = bases[si+4];
	node* i5 = bases[si+5];
	node* i6 = bases[si+6];
	node* i7 = bases[si+7];
	node* i8 = bases[si+8];
	node* i9 = bases[si+9];
	node* i10 = bases[si+10];
	node* i11 = bases[si+11];
	node* i12 = bases[si+12];
	node* i13 = bases[si+13];
	node* i14 = bases[si+14];
    node* i15 = bases[si+15];
	while (count > 0) {
		count--;
		sum += ifa(&(i0->id));
		sum += ifa(&(i1->id));
		sum += ifa(&(i2->id));
		sum += ifa(&(i3->id));
		sum += ifa(&(i4->id));
		sum += ifa(&(i5->id));
		sum += ifa(&(i6->id));
		sum += ifa(&(i7->id));
		sum += ifa(&(i8->id));
		sum += ifa(&(i9->id));
		sum += ifa(&(i10->id));
		sum += ifa(&(i11->id));
		sum += ifa(&(i12->id));
		sum += ifa(&(i13->id));
		sum += ifa(&(i14->id));
        sum += ifa(&(i15->id));
		 i0 = i0->next; i1 = i1->next; i2 = i2->next; i3 = i3->next; i4 = i4->next; i5 = i5->next; i6 = i6->next; i7 = i7->next; i8 = i8->next; i9 = i9->next; i10 = i10->next; i11 = i11->next; i12 = i12->next; i13 = i13->next; i14 = i14->next; i6 = i6->next;
	}
	}
  return sum;
}
