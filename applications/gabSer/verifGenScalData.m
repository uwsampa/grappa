function verifGenScalData(SCALE, E, V)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% Function verifGenScalData() - verify genScalData().
%
% First level checks on the functionality of the code in the Scalable
% Data Generator.
%
% Displays the adjacency matrix of the data generated by genScalData().
% Prints results to the Matlab console.
%
% For a detailed description of the scalable graph analysis algorithm, 
% please see Scalable Graph Benchmark Written Specification, V1.0.
% 
%
% INPUT
%
% SCALE            - [int] scales the problem size (from user).
%
% E.               - [struct] list of weighted edge tuples (from SDG):
%   StartVertex    - [1xM int array] start vertices.
%   EndVertex      - [1xM int array] end vertices.
%   Weight         - [1xM int array] integer weights.
%
% V.               - [struct] misc info for verification (from SDG):
%   lgN            - [int] rounded down log of number of vertices in set, 
%                    (only for TORUS data).
%   N              - [int] total number of vertices in the tuple set.
%   M              - [int] total number of edges in the tuple set.
%   C              - [int] maximum value of any of the weights.
%
%
%
% REVISION
% 22-Feb-09   1.0 Release   MIT Lincoln Laboratory.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

declareGlobals;

  
fprintf('\n\tScalable Data Generator - Results:\n');


if ENABLE_PLOTS && ENABLE_PLOT_SDG

        % Build its adjacency matrix for viewing purposes. If randomized,
        % de-randomize it to be able to see its structure.
        if ENABLE_RANDOM_VERTICES

            adjacency = sparse(V.invRandVert(E.StartVertex), ...
                V.invRandVert(E.EndVertex), 1);

        else

            adjacency = sparse(E.StartVertex, E.EndVertex, V.C);

        end
        fh = placeFigure();
        spy(adjacency);
        
        if ENABLE_DATA_TYPE == RMAT
            title(sprintf('SDG - Sparse Adjacency Matrix of the RMAT Tuple Set'));
            ylabel('Vertex Number');
            % axis xy -- dissabled to correspond with console's (ENABLE_MDUMP).
            fprintf('\n\t(See Figure: "SDG - Sparse Adjacency Matrix for the RMAT Tuple Set".)\n\n');

        else % if ENABLE_DATA_TYPE == any torus
            title(sprintf(['SDG - Sparse Adjacency Matrix for the torus Tuple Set\n', ...
                'SCALE = ', int2str(SCALE), ', D = ', int2str(TORUS_DIM), ', lgN = ', int2str(V.lgN)]));
            % TM: Also add ND?
            ylabel('Vertex Number');
            % axis xy -- dissabled to correspond with console's (ENABLE_MDUMP).
            fprintf('\n\t(See Figure: "SDG - Sparse Adjacency Matrix for the torus Tuple Set".)\n\n');

        end % of if ENABLE_DATA_TYPE == ~RMAT
        
else
    fprintf('\n\t(SDG plots dissabled).\n\n');
end % of ENABLE_PLOTS && ENABLE_PLOT_SDG


if ~(ENABLE_DATA_TYPE == RMAT)

    %---------------------------------------------------------------------
    % For any torus, check the randomized vs. non-randomized degree
    % distributions. These should be all zeros.
    %---------------------------------------------------------------------

    % Create adjacency matrix for viewing purposes.
    AA = sparse(E.StartVertex, E.EndVertex, ones(1, V.M));  

    % Create a randomized adjaceny matrix.
    ir = randperm(V.N);  
    AAr = sparse(ir(E.StartVertex), ir(E.EndVertex), ones(1, V.M));  

    inDegAA = sum(AA, 1);
    outDegAA = sum(AA, 2);
    inDegAAr = sum(AAr, 1);
    outDegAAr = sum(AAr, 2);

    % Check the degree distributions. These should all be zeros.
    fprintf('\tCheck the torus''s degree distributions -> they should all be zero:\n');
    if ENABLE_DATA_TYPE == HALF_TORUS_1D

        % TMQ: This def of in/out deg does not equal def in
        % verifBetwCentrality.m 94.  How should these vars be renamed?
        
        inDeg = max(abs(inDegAA - TORUS_DIM));
        outDeg = max(abs(outDegAA - TORUS_DIM));
        inDegRand = max(abs(inDegAAr - TORUS_DIM));
        outDegRand = max(abs(outDegAAr - TORUS_DIM));

        fprintf(['\tinDeg == %.2f, \t\toutDeg == %.2f,',...
            '\n\tinDegRand == %.2f, \toutDegRand == %.2f.\n\n'], ...
            inDeg, outDeg, inDegRand, outDegRand);

    else % if ENABLE_DATA_TYPE == any torus
        
        % TMQ: This def of in/out deg does not equal def in
        % verifBetwCentrality.m 94.  How should these vars be renamed?
        
        inDeg = max(abs(inDegAA - 2*TORUS_DIM));
        outDeg = max(abs(outDegAA - 2*TORUS_DIM));
        inDegRand = max(abs(inDegAAr - 2*TORUS_DIM));
        outDegRand = max(abs(outDegAAr - 2*TORUS_DIM));

        fprintf(['\tinDeg == %.2f, \t\toutDeg == %.2f,',...
            '\n\tinDegRand == %.2f, \toutDegRand == %.2f.\n\n'], ...
            inDeg, outDeg, inDegRand, outDegRand);
    
    end

end % of if ENABLE_DATA_TYPE == any torus


if ENABLE_MDUMP

    fprintf('\n\tThe generated edge tuple set (with a few possible \n\tmultiple edges) is: \n\n');
    for ii = 1:V.M
        fprintf('\t\t%4d. (%d,%d) =\t %d\n', ...
            ii, E.StartVertex(ii), E.EndVertex(ii), E.Weight(ii));
    end
    fprintf('\n');

end % of if ENABLE_MDUMP




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright © 2009, Massachusetts Institute of Technology
% All rights reserved.
% 
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are  
% met:
%    * Redistributions of source code must retain the above copyright
%      notice, this list of conditions and the following disclaimer.
%    * Redistributions in binary form must reproduce the above copyright
%      notice, this list of conditions and the following disclaimer in the
%      documentation and/or other materials provided with the distribution.
%    * Neither the name of the Massachusetts Institute of Technology nor  
%      the names of its contributors may be used to endorse or promote 
%      products derived from this software without specific prior written 
%      permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
% IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
% THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
% PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
% CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
% EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
% PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
% PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
% LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
% NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS   
% SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
