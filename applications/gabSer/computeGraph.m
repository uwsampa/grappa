function [G, E] = computeGraph(SCALE, E)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% Function computeGraph() - Kernel 1 - Graph Construction.
%
% The first computational kernel generates a graph from the input data set 
% of edge tuples. This function has no knowledge of any underlying graph 
% structure. 
%
% First, the edge tuple list is preconditioned to remove any (few) multiple 
% edges that it has, before forming the graph.  Allowing Kernel 1 to modify  
% the SDG's data was decided to be allowed for this kernel only, as it was
% considered too difficult to require that multiple edges be removed in the
% parallel SDG's RMAT.
% 
% The graph is represented using Matlab's 2D sparse matrix representation 
% of its square adjacency matrix. 
%
% For a detailed description of the scalable graph analysis algorithm, 
% please see Scalable Graph Benchmark Written Specification, V1.0.
%
%
% INPUT
%
% SCALE            - [int] only used to remove the few multiple edges (if 
%                    any) generated by the R-MAT.
%
% E.               - [struct] list of weighted edge tuples (from SDG):
%   StartVertex    - [1xM int array] start vertices,
%   EndVertex      - [1xM int array] end vertices,
%   Weight         - [1xM int array] integer weights,
%                    (where M is total number of edges in the graph).
%
% OUTPUT
%
% G.               - [struct] graph used by all subsequent kernels:
%   adjMatrix      - [?x?] sparse weighted adjacency matrix of the graph.
%
% E.               - [struct] list of weighted edge tuples (from SDG):
%   StartVertex    - [1xM int array] start vertices,
%   EndVertex      - [1xM int array] end vertices,
%   Weight         - [1xM int array] integer weights,
%                    (where M is total number of edges in the graph).
%
% REVISION
% 22-Feb-09   1.0 Release   MIT Lincoln Laboratory.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

declareGlobals;


%--------------------------------------------------------------------------
%  Precondition the edge set to remove any of the few multiple edges
%  generated by the R-MAT.
%--------------------------------------------------------------------------

% Count how many distinct vertices there are in the edge set.
totVertices = 2^SCALE;

% Create the matrix
G.adjMatrix =  sparse(totVertices,totVertices);

% Store the local pieces
startVertex = E.StartVertex;
endVertex   = E.EndVertex;
weight      = E.Weight;

E = []; % Re-initialize the original edge structure.

% Get unique indices of the edge set.
[ignore ii ignore] = unique(sub2ind([totVertices totVertices], ...
    startVertex, endVertex));

% Pull-out only the unique edges.
E.StartVertex = startVertex(ii);
E.EndVertex   = endVertex(ii);
E.Weight      = weight(ii);

%--------------------------------------------------------------------------
%  Construct a weighted graph, by generating its adjacency matrix.
%--------------------------------------------------------------------------
    
G.adjMatrix = sparse(E.StartVertex, E.EndVertex, E.Weight, ...
                     size(G.adjMatrix,1), size(G.adjMatrix,2));


 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright © 2009, Massachusetts Institute of Technology
% All rights reserved.
% 
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are  
% met:
%    * Redistributions of source code must retain the above copyright
%      notice, this list of conditions and the following disclaimer.
%    * Redistributions in binary form must reproduce the above copyright
%      notice, this list of conditions and the following disclaimer in the
%      documentation and/or other materials provided with the distribution.
%    * Neither the name of the Massachusetts Institute of Technology nor  
%      the names of its contributors may be used to endorse or promote 
%      products derived from this software without specific prior written 
%      permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
% IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
% THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
% PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
% CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
% EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
% PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
% PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
% LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
% NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS   
% SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
